
/home/jj/Documents/TrainControl/KatelynTrain/target/1.5.2/boron/KatelynTrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5a80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e438  000d5a84  0001e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000034c  2003e4a4  2003e4a4  0002e4a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5af0  000d5af0  00025af0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5b18  000d5b18  00025b18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1d60  00000000  00000000  00025b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ff07  00000000  00000000  000f787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000024c8  00000000  00000000  00107783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00031f7e  00000000  00000000  00109c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024b5e  00000000  00000000  0013bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00105b82  00000000  00000000  00160727  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e76b  00000000  00000000  002662a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004790  00000000  00000000  00284a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cdbc  00000000  00000000  002891a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa29 	bl	d5484 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa2e 	bl	d549a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e438 	.word	0x2003e438
   d4048:	000d5a84 	.word	0x000d5a84
   d404c:	2003e4a4 	.word	0x2003e4a4
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fd5b 	bl	d4b14 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5a74 	.word	0x000d5a74
   d4080:	000d5a3c 	.word	0x000d5a3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82e 	b.w	d40e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f847 	bl	d411c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd01 	b.w	d4a98 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 b9f9 	b.w	d448c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 b9ff 	b.w	d449c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 b9fd 	b.w	d449c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z11changeSpeed6String>:

void loop() {

}

int changeSpeed(String newSpeed){
   d40b2:	b508      	push	{r3, lr}
  //255 is the most that the PWM can take
  //the power supply goes to 19.22V, but the train can only take a max of 19.22V
  //throw out anything above 12V (which is ~159)
  int newSpeedAsInt = newSpeed.toInt();
   d40b4:	f000 ffb8 	bl	d5028 <_ZNK6String5toIntEv>
  // }else if (newSpeedAsInt < 80)
  // {
  //   newSpeedAsInt = 0;
  // }  

  analogWrite(PWM_PIN, newSpeedAsInt);
   d40b8:	4601      	mov	r1, r0
   d40ba:	2002      	movs	r0, #2
   d40bc:	f001 f841 	bl	d5142 <_Z11analogWritetm>
}
   d40c0:	bd08      	pop	{r3, pc}
	...

000d40c4 <_Z10killSwitch6String>:

int killSwitch(String argsNotImplemented){
   d40c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  changeSpeed("0");
   d40c6:	4906      	ldr	r1, [pc, #24]	; (d40e0 <_Z10killSwitch6String+0x1c>)
   d40c8:	4668      	mov	r0, sp
   d40ca:	f000 ff80 	bl	d4fce <_ZN6StringC1EPK19__FlashStringHelper>
   d40ce:	4668      	mov	r0, sp
   d40d0:	f7ff ffef 	bl	d40b2 <_Z11changeSpeed6String>
   d40d4:	4668      	mov	r0, sp
   d40d6:	f000 ff33 	bl	d4f40 <_ZN6StringD1Ev>
   d40da:	b005      	add	sp, #20
   d40dc:	f85d fb04 	ldr.w	pc, [sp], #4
   d40e0:	000d5640 	.word	0x000d5640

000d40e4 <setup>:
int killSwitch(String argsNotImplemented);



// setup() runs once, when the device is first turned on.
void setup() {
   d40e4:	b510      	push	{r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d40e6:	4c08      	ldr	r4, [pc, #32]	; (d4108 <setup+0x24>)
  pinMode(PWM_PIN, OUTPUT);
   d40e8:	2101      	movs	r1, #1
   d40ea:	2002      	movs	r0, #2
   d40ec:	f001 f818 	bl	d5120 <pinMode>
   d40f0:	4a06      	ldr	r2, [pc, #24]	; (d410c <setup+0x28>)
   d40f2:	4907      	ldr	r1, [pc, #28]	; (d4110 <setup+0x2c>)
   d40f4:	4620      	mov	r0, r4
   d40f6:	f000 fc9a 	bl	d4a2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d40fa:	4620      	mov	r0, r4
   d40fc:	4a05      	ldr	r2, [pc, #20]	; (d4114 <setup+0x30>)
   d40fe:	4906      	ldr	r1, [pc, #24]	; (d4118 <setup+0x34>)

  //register remote functions 
  Particle.function("changeSpeed", changeSpeed);
  Particle.function("killSwitch", killSwitch);
}
   d4100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4104:	f000 bc93 	b.w	d4a2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4108:	000d4a03 	.word	0x000d4a03
   d410c:	000d5642 	.word	0x000d5642
   d4110:	000d40b3 	.word	0x000d40b3
   d4114:	000d564e 	.word	0x000d564e
   d4118:	000d40c5 	.word	0x000d40c5

000d411c <loop>:

void loop() {
   d411c:	4770      	bx	lr

000d411e <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d411e:	f000 b8f9 	b.w	d4314 <HAL_Pin_Map>
	...

000d4124 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4124:	b508      	push	{r3, lr}
   d4126:	4b02      	ldr	r3, [pc, #8]	; (d4130 <HAL_USB_USART_Init+0xc>)
   d4128:	681b      	ldr	r3, [r3, #0]
   d412a:	681b      	ldr	r3, [r3, #0]
   d412c:	9301      	str	r3, [sp, #4]
   d412e:	bd08      	pop	{r3, pc}
   d4130:	0003024c 	.word	0x0003024c

000d4134 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4134:	b508      	push	{r3, lr}
   d4136:	4b02      	ldr	r3, [pc, #8]	; (d4140 <HAL_USB_USART_Available_Data+0xc>)
   d4138:	681b      	ldr	r3, [r3, #0]
   d413a:	691b      	ldr	r3, [r3, #16]
   d413c:	9301      	str	r3, [sp, #4]
   d413e:	bd08      	pop	{r3, pc}
   d4140:	0003024c 	.word	0x0003024c

000d4144 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4144:	b508      	push	{r3, lr}
   d4146:	4b02      	ldr	r3, [pc, #8]	; (d4150 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4148:	681b      	ldr	r3, [r3, #0]
   d414a:	695b      	ldr	r3, [r3, #20]
   d414c:	9301      	str	r3, [sp, #4]
   d414e:	bd08      	pop	{r3, pc}
   d4150:	0003024c 	.word	0x0003024c

000d4154 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4154:	b508      	push	{r3, lr}
   d4156:	4b02      	ldr	r3, [pc, #8]	; (d4160 <HAL_USB_USART_Receive_Data+0xc>)
   d4158:	681b      	ldr	r3, [r3, #0]
   d415a:	699b      	ldr	r3, [r3, #24]
   d415c:	9301      	str	r3, [sp, #4]
   d415e:	bd08      	pop	{r3, pc}
   d4160:	0003024c 	.word	0x0003024c

000d4164 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4164:	b508      	push	{r3, lr}
   d4166:	4b02      	ldr	r3, [pc, #8]	; (d4170 <HAL_USB_USART_Send_Data+0xc>)
   d4168:	681b      	ldr	r3, [r3, #0]
   d416a:	69db      	ldr	r3, [r3, #28]
   d416c:	9301      	str	r3, [sp, #4]
   d416e:	bd08      	pop	{r3, pc}
   d4170:	0003024c 	.word	0x0003024c

000d4174 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4174:	b508      	push	{r3, lr}
   d4176:	4b02      	ldr	r3, [pc, #8]	; (d4180 <HAL_USB_USART_Flush_Data+0xc>)
   d4178:	681b      	ldr	r3, [r3, #0]
   d417a:	6a1b      	ldr	r3, [r3, #32]
   d417c:	9301      	str	r3, [sp, #4]
   d417e:	bd08      	pop	{r3, pc}
   d4180:	0003024c 	.word	0x0003024c

000d4184 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4184:	b508      	push	{r3, lr}
   d4186:	4b02      	ldr	r3, [pc, #8]	; (d4190 <HAL_I2C_Write_Data+0xc>)
   d4188:	681b      	ldr	r3, [r3, #0]
   d418a:	6a1b      	ldr	r3, [r3, #32]
   d418c:	9301      	str	r3, [sp, #4]
   d418e:	bd08      	pop	{r3, pc}
   d4190:	00030228 	.word	0x00030228

000d4194 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4194:	b508      	push	{r3, lr}
   d4196:	4b02      	ldr	r3, [pc, #8]	; (d41a0 <HAL_I2C_Available_Data+0xc>)
   d4198:	681b      	ldr	r3, [r3, #0]
   d419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d419c:	9301      	str	r3, [sp, #4]
   d419e:	bd08      	pop	{r3, pc}
   d41a0:	00030228 	.word	0x00030228

000d41a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d41a4:	b508      	push	{r3, lr}
   d41a6:	4b02      	ldr	r3, [pc, #8]	; (d41b0 <HAL_I2C_Read_Data+0xc>)
   d41a8:	681b      	ldr	r3, [r3, #0]
   d41aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d41ac:	9301      	str	r3, [sp, #4]
   d41ae:	bd08      	pop	{r3, pc}
   d41b0:	00030228 	.word	0x00030228

000d41b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d41b4:	b508      	push	{r3, lr}
   d41b6:	4b02      	ldr	r3, [pc, #8]	; (d41c0 <HAL_I2C_Peek_Data+0xc>)
   d41b8:	681b      	ldr	r3, [r3, #0]
   d41ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d41bc:	9301      	str	r3, [sp, #4]
   d41be:	bd08      	pop	{r3, pc}
   d41c0:	00030228 	.word	0x00030228

000d41c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d41c4:	b508      	push	{r3, lr}
   d41c6:	4b02      	ldr	r3, [pc, #8]	; (d41d0 <HAL_I2C_Flush_Data+0xc>)
   d41c8:	681b      	ldr	r3, [r3, #0]
   d41ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	bd08      	pop	{r3, pc}
   d41d0:	00030228 	.word	0x00030228

000d41d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d41d4:	b508      	push	{r3, lr}
   d41d6:	4b02      	ldr	r3, [pc, #8]	; (d41e0 <HAL_I2C_Is_Enabled+0xc>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d41dc:	9301      	str	r3, [sp, #4]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	00030228 	.word	0x00030228

000d41e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <HAL_I2C_Init+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	00030228 	.word	0x00030228

000d41f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <HAL_USART_Init+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	681b      	ldr	r3, [r3, #0]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	0003023c 	.word	0x0003023c

000d4204 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <HAL_USART_Write_Data+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	68db      	ldr	r3, [r3, #12]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	0003023c 	.word	0x0003023c

000d4214 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <HAL_USART_Available_Data+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	691b      	ldr	r3, [r3, #16]
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	0003023c 	.word	0x0003023c

000d4224 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <HAL_USART_Read_Data+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	695b      	ldr	r3, [r3, #20]
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	0003023c 	.word	0x0003023c

000d4234 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <HAL_USART_Peek_Data+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	699b      	ldr	r3, [r3, #24]
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	0003023c 	.word	0x0003023c

000d4244 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <HAL_USART_Flush_Data+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	69db      	ldr	r3, [r3, #28]
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	0003023c 	.word	0x0003023c

000d4254 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <HAL_USART_Is_Enabled+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	6a1b      	ldr	r3, [r3, #32]
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	0003023c 	.word	0x0003023c

000d4264 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <HAL_USART_Available_Data_For_Write+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	0003023c 	.word	0x0003023c

000d4274 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <inet_inet_ntop+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	695b      	ldr	r3, [r3, #20]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030264 	.word	0x00030264

000d4284 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <os_thread_is_current+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	689b      	ldr	r3, [r3, #8]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030248 	.word	0x00030248

000d4294 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <os_thread_join+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	691b      	ldr	r3, [r3, #16]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030248 	.word	0x00030248

000d42a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <os_thread_cleanup+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	695b      	ldr	r3, [r3, #20]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030248 	.word	0x00030248

000d42b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <os_mutex_recursive_create+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030248 	.word	0x00030248

000d42c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <os_mutex_recursive_destroy+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030248 	.word	0x00030248

000d42d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <HAL_RNG_GetRandomNumber+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	685b      	ldr	r3, [r3, #4]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030218 	.word	0x00030218

000d42e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	695b      	ldr	r3, [r3, #20]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030218 	.word	0x00030218

000d42f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_SPI_Init+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	69db      	ldr	r3, [r3, #28]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030230 	.word	0x00030230

000d4304 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_SPI_Is_Enabled+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	6a1b      	ldr	r3, [r3, #32]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030230 	.word	0x00030230

000d4314 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <HAL_Pin_Map+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	681b      	ldr	r3, [r3, #0]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	0003022c 	.word	0x0003022c

000d4324 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_Validate_Pin_Function+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	685b      	ldr	r3, [r3, #4]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003022c 	.word	0x0003022c

000d4334 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_Pin_Mode+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	689b      	ldr	r3, [r3, #8]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	0003022c 	.word	0x0003022c

000d4344 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_Get_Pin_Mode+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	68db      	ldr	r3, [r3, #12]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003022c 	.word	0x0003022c

000d4354 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_DAC_Write+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	0003022c 	.word	0x0003022c

000d4364 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_PWM_Write_Ext+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003022c 	.word	0x0003022c

000d4374 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <netdb_freeaddrinfo+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	689b      	ldr	r3, [r3, #8]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030268 	.word	0x00030268

000d4384 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <netdb_getaddrinfo+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	68db      	ldr	r3, [r3, #12]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030268 	.word	0x00030268

000d4394 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <spark_function+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	685b      	ldr	r3, [r3, #4]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030244 	.word	0x00030244

000d43a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030244 	.word	0x00030244

000d43b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <network_connect+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	685b      	ldr	r3, [r3, #4]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030240 	.word	0x00030240

000d43c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <network_connecting+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	689b      	ldr	r3, [r3, #8]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030240 	.word	0x00030240

000d43d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <network_disconnect+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	68db      	ldr	r3, [r3, #12]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030240 	.word	0x00030240

000d43e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <network_ready+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	691b      	ldr	r3, [r3, #16]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030240 	.word	0x00030240

000d43f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <network_on+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030240 	.word	0x00030240

000d4404 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <network_off+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	699b      	ldr	r3, [r3, #24]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030240 	.word	0x00030240

000d4414 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <network_listen+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	69db      	ldr	r3, [r3, #28]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030240 	.word	0x00030240

000d4424 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <network_listening+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6a1b      	ldr	r3, [r3, #32]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030240 	.word	0x00030240

000d4434 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <network_set_listen_timeout+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030240 	.word	0x00030240

000d4444 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <network_get_listen_timeout+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030240 	.word	0x00030240

000d4454 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <set_system_mode+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	685b      	ldr	r3, [r3, #4]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030220 	.word	0x00030220

000d4464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b03      	ldr	r3, [pc, #12]	; (d4474 <system_ctrl_set_app_request_handler+0x10>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d446e:	9301      	str	r3, [sp, #4]
   d4470:	bd08      	pop	{r3, pc}
   d4472:	0000      	.short	0x0000
   d4474:	00030220 	.word	0x00030220

000d4478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b03      	ldr	r3, [pc, #12]	; (d4488 <system_ctrl_set_result+0x10>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4482:	9301      	str	r3, [sp, #4]
   d4484:	bd08      	pop	{r3, pc}
   d4486:	0000      	.short	0x0000
   d4488:	00030220 	.word	0x00030220

000d448c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <malloc+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	681b      	ldr	r3, [r3, #0]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003021c 	.word	0x0003021c

000d449c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <free+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	685b      	ldr	r3, [r3, #4]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003021c 	.word	0x0003021c

000d44ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <realloc+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	689b      	ldr	r3, [r3, #8]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003021c 	.word	0x0003021c

000d44bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d44bc:	2300      	movs	r3, #0
   d44be:	461a      	mov	r2, r3
   d44c0:	6840      	ldr	r0, [r0, #4]
   d44c2:	f7ff bf77 	b.w	d43b4 <network_connect>

000d44c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d44c6:	2200      	movs	r2, #0
   d44c8:	2102      	movs	r1, #2
   d44ca:	6840      	ldr	r0, [r0, #4]
   d44cc:	f7ff bf82 	b.w	d43d4 <network_disconnect>

000d44d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d44d0:	2200      	movs	r2, #0
   d44d2:	4611      	mov	r1, r2
   d44d4:	6840      	ldr	r0, [r0, #4]
   d44d6:	f7ff bf75 	b.w	d43c4 <network_connecting>

000d44da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d44da:	2200      	movs	r2, #0
   d44dc:	4611      	mov	r1, r2
   d44de:	6840      	ldr	r0, [r0, #4]
   d44e0:	f7ff bf80 	b.w	d43e4 <network_ready>

000d44e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d44e4:	2300      	movs	r3, #0
   d44e6:	461a      	mov	r2, r3
   d44e8:	4619      	mov	r1, r3
   d44ea:	6840      	ldr	r0, [r0, #4]
   d44ec:	f7ff bf82 	b.w	d43f4 <network_on>

000d44f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d44f0:	2300      	movs	r3, #0
   d44f2:	461a      	mov	r2, r3
   d44f4:	4619      	mov	r1, r3
   d44f6:	6840      	ldr	r0, [r0, #4]
   d44f8:	f7ff bf84 	b.w	d4404 <network_off>

000d44fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d44fc:	2200      	movs	r2, #0
   d44fe:	f081 0101 	eor.w	r1, r1, #1
   d4502:	6840      	ldr	r0, [r0, #4]
   d4504:	f7ff bf86 	b.w	d4414 <network_listen>

000d4508 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4508:	2200      	movs	r2, #0
   d450a:	6840      	ldr	r0, [r0, #4]
   d450c:	f7ff bf92 	b.w	d4434 <network_set_listen_timeout>

000d4510 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4510:	2200      	movs	r2, #0
   d4512:	4611      	mov	r1, r2
   d4514:	6840      	ldr	r0, [r0, #4]
   d4516:	f7ff bf95 	b.w	d4444 <network_get_listen_timeout>

000d451a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d451a:	2200      	movs	r2, #0
   d451c:	4611      	mov	r1, r2
   d451e:	6840      	ldr	r0, [r0, #4]
   d4520:	f7ff bf80 	b.w	d4424 <network_listening>

000d4524 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4528:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d452a:	b095      	sub	sp, #84	; 0x54
   d452c:	4616      	mov	r6, r2
   d452e:	460d      	mov	r5, r1
   d4530:	4607      	mov	r7, r0
    IPAddress addr;
   d4532:	f000 fa25 	bl	d4980 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4536:	4621      	mov	r1, r4
   d4538:	2220      	movs	r2, #32
   d453a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d453c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d453e:	f000 ffac 	bl	d549a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4542:	2340      	movs	r3, #64	; 0x40
   d4544:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4546:	4621      	mov	r1, r4
   d4548:	466b      	mov	r3, sp
   d454a:	aa0c      	add	r2, sp, #48	; 0x30
   d454c:	4630      	mov	r0, r6
   d454e:	f7ff ff19 	bl	d4384 <netdb_getaddrinfo>
    if (!r) {
   d4552:	4604      	mov	r4, r0
   d4554:	2800      	cmp	r0, #0
   d4556:	d144      	bne.n	d45e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4558:	4602      	mov	r2, r0
   d455a:	2101      	movs	r1, #1
   d455c:	6868      	ldr	r0, [r5, #4]
   d455e:	f7ff ff41 	bl	d43e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4562:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4564:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4566:	4622      	mov	r2, r4
   d4568:	6868      	ldr	r0, [r5, #4]
   d456a:	f7ff ff3b 	bl	d43e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d456e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4570:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4572:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4574:	2e00      	cmp	r6, #0
   d4576:	d034      	beq.n	d45e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4578:	2900      	cmp	r1, #0
   d457a:	d132      	bne.n	d45e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d457c:	6873      	ldr	r3, [r6, #4]
   d457e:	2b02      	cmp	r3, #2
   d4580:	d002      	beq.n	d4588 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4582:	2b0a      	cmp	r3, #10
   d4584:	d009      	beq.n	d459a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4586:	e02a      	b.n	d45de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4588:	f1b8 0f00 	cmp.w	r8, #0
   d458c:	d027      	beq.n	d45de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d458e:	6971      	ldr	r1, [r6, #20]
   d4590:	4638      	mov	r0, r7
   d4592:	3104      	adds	r1, #4
   d4594:	f000 fa21 	bl	d49da <_ZN9IPAddressaSEPKh>
   d4598:	e020      	b.n	d45dc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d459a:	f1b9 0f00 	cmp.w	r9, #0
   d459e:	d01e      	beq.n	d45de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d45a0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d45a2:	2211      	movs	r2, #17
   d45a4:	a801      	add	r0, sp, #4
   d45a6:	f000 ff78 	bl	d549a <memset>
                    a.v = 6;
   d45aa:	2306      	movs	r3, #6
   d45ac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d45b0:	ad01      	add	r5, sp, #4
   d45b2:	f104 0308 	add.w	r3, r4, #8
   d45b6:	3418      	adds	r4, #24
   d45b8:	6818      	ldr	r0, [r3, #0]
   d45ba:	6859      	ldr	r1, [r3, #4]
   d45bc:	462a      	mov	r2, r5
   d45be:	c203      	stmia	r2!, {r0, r1}
   d45c0:	3308      	adds	r3, #8
   d45c2:	42a3      	cmp	r3, r4
   d45c4:	4615      	mov	r5, r2
   d45c6:	d1f7      	bne.n	d45b8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d45c8:	a901      	add	r1, sp, #4
   d45ca:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d45cc:	ad07      	add	r5, sp, #28
   d45ce:	f000 f9e5 	bl	d499c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d45d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d45d4:	1d3c      	adds	r4, r7, #4
   d45d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d45d8:	682b      	ldr	r3, [r5, #0]
   d45da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d45dc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d45de:	69f6      	ldr	r6, [r6, #28]
   d45e0:	e7c8      	b.n	d4574 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d45e2:	9800      	ldr	r0, [sp, #0]
   d45e4:	f7ff fec6 	bl	d4374 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d45e8:	4638      	mov	r0, r7
   d45ea:	b015      	add	sp, #84	; 0x54
   d45ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d45f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45f0:	4b02      	ldr	r3, [pc, #8]	; (d45fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d45f2:	4a03      	ldr	r2, [pc, #12]	; (d4600 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d45f4:	601a      	str	r2, [r3, #0]
   d45f6:	2200      	movs	r2, #0
   d45f8:	605a      	str	r2, [r3, #4]
   d45fa:	4770      	bx	lr
   d45fc:	2003e4a8 	.word	0x2003e4a8
   d4600:	000d5664 	.word	0x000d5664

000d4604 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4604:	2200      	movs	r2, #0
   d4606:	4611      	mov	r1, r2
   d4608:	6840      	ldr	r0, [r0, #4]
   d460a:	f7ff bf0b 	b.w	d4424 <network_listening>

000d460e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d460e:	2200      	movs	r2, #0
   d4610:	4611      	mov	r1, r2
   d4612:	6840      	ldr	r0, [r0, #4]
   d4614:	f7ff bf16 	b.w	d4444 <network_get_listen_timeout>

000d4618 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4618:	2200      	movs	r2, #0
   d461a:	6840      	ldr	r0, [r0, #4]
   d461c:	f7ff bf0a 	b.w	d4434 <network_set_listen_timeout>

000d4620 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4620:	2200      	movs	r2, #0
   d4622:	f081 0101 	eor.w	r1, r1, #1
   d4626:	6840      	ldr	r0, [r0, #4]
   d4628:	f7ff bef4 	b.w	d4414 <network_listen>

000d462c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d462c:	2300      	movs	r3, #0
   d462e:	461a      	mov	r2, r3
   d4630:	2101      	movs	r1, #1
   d4632:	6840      	ldr	r0, [r0, #4]
   d4634:	f7ff bee6 	b.w	d4404 <network_off>

000d4638 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4638:	2300      	movs	r3, #0
   d463a:	461a      	mov	r2, r3
   d463c:	4619      	mov	r1, r3
   d463e:	6840      	ldr	r0, [r0, #4]
   d4640:	f7ff bed8 	b.w	d43f4 <network_on>

000d4644 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4644:	2200      	movs	r2, #0
   d4646:	4611      	mov	r1, r2
   d4648:	6840      	ldr	r0, [r0, #4]
   d464a:	f7ff becb 	b.w	d43e4 <network_ready>

000d464e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d464e:	2200      	movs	r2, #0
   d4650:	4611      	mov	r1, r2
   d4652:	6840      	ldr	r0, [r0, #4]
   d4654:	f7ff beb6 	b.w	d43c4 <network_connecting>

000d4658 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4658:	2200      	movs	r2, #0
   d465a:	2102      	movs	r1, #2
   d465c:	6840      	ldr	r0, [r0, #4]
   d465e:	f7ff beb9 	b.w	d43d4 <network_disconnect>

000d4662 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4662:	2300      	movs	r3, #0
   d4664:	461a      	mov	r2, r3
   d4666:	6840      	ldr	r0, [r0, #4]
   d4668:	f7ff bea4 	b.w	d43b4 <network_connect>

000d466c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d466c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d466e:	4605      	mov	r5, r0
   d4670:	b188      	cbz	r0, d4696 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4672:	6804      	ldr	r4, [r0, #0]
   d4674:	b14c      	cbz	r4, d468a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4676:	68a3      	ldr	r3, [r4, #8]
   d4678:	b11b      	cbz	r3, d4682 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d467a:	2203      	movs	r2, #3
   d467c:	4621      	mov	r1, r4
   d467e:	4620      	mov	r0, r4
   d4680:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4682:	2110      	movs	r1, #16
   d4684:	4620      	mov	r0, r4
   d4686:	f000 fd8f 	bl	d51a8 <_ZdlPvj>
   d468a:	4628      	mov	r0, r5
   d468c:	2114      	movs	r1, #20
      }
   d468e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4692:	f000 bd89 	b.w	d51a8 <_ZdlPvj>
   d4696:	bd38      	pop	{r3, r4, r5, pc}

000d4698 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4698:	b110      	cbz	r0, d46a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d469a:	6803      	ldr	r3, [r0, #0]
   d469c:	685b      	ldr	r3, [r3, #4]
   d469e:	4718      	bx	r3
   d46a0:	4770      	bx	lr

000d46a2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d46a2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d46a4:	6803      	ldr	r3, [r0, #0]
   d46a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d46a8:	b1bb      	cbz	r3, d46da <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d46aa:	6858      	ldr	r0, [r3, #4]
   d46ac:	f7ff fdea 	bl	d4284 <os_thread_is_current>
   d46b0:	b978      	cbnz	r0, d46d2 <_ZN6ThreadD1Ev+0x30>
   d46b2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d46b4:	7c5a      	ldrb	r2, [r3, #17]
   d46b6:	b912      	cbnz	r2, d46be <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d46b8:	6858      	ldr	r0, [r3, #4]
   d46ba:	f7ff fdeb 	bl	d4294 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d46be:	6823      	ldr	r3, [r4, #0]
   d46c0:	6858      	ldr	r0, [r3, #4]
   d46c2:	f7ff fdef 	bl	d42a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d46c6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d46c8:	2300      	movs	r3, #0
   d46ca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d46cc:	b128      	cbz	r0, d46da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d46ce:	f7ff ffcd 	bl	d466c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d46d2:	6820      	ldr	r0, [r4, #0]
   d46d4:	b108      	cbz	r0, d46da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d46d6:	f7ff ffc9 	bl	d466c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d46da:	4620      	mov	r0, r4
   d46dc:	bd10      	pop	{r4, pc}

000d46de <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d46de:	b538      	push	{r3, r4, r5, lr}
   d46e0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d46e2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d46e6:	b108      	cbz	r0, d46ec <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d46e8:	f7ff fcd9 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d46ec:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d46f0:	b108      	cbz	r0, d46f6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d46f2:	f7ff fde7 	bl	d42c4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d46f6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d46fa:	b135      	cbz	r5, d470a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d46fc:	4628      	mov	r0, r5
   d46fe:	f7ff ffd0 	bl	d46a2 <_ZN6ThreadD1Ev>
   d4702:	2104      	movs	r1, #4
   d4704:	4628      	mov	r0, r5
   d4706:	f000 fd4f 	bl	d51a8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d470a:	6820      	ldr	r0, [r4, #0]
   d470c:	b108      	cbz	r0, d4712 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d470e:	f7ff ffc3 	bl	d4698 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4712:	4620      	mov	r0, r4
   d4714:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4718 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4718:	b510      	push	{r4, lr}
   d471a:	4b04      	ldr	r3, [pc, #16]	; (d472c <_ZN5spark9MeshClassD1Ev+0x14>)
   d471c:	4604      	mov	r4, r0
   d471e:	f840 3b08 	str.w	r3, [r0], #8
   d4722:	f7ff ffdc 	bl	d46de <_ZN5spark11MeshPublishD1Ev>
   d4726:	4620      	mov	r0, r4
   d4728:	bd10      	pop	{r4, pc}
   d472a:	bf00      	nop
   d472c:	000d5698 	.word	0x000d5698

000d4730 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4730:	b538      	push	{r3, r4, r5, lr}
   d4732:	4c0e      	ldr	r4, [pc, #56]	; (d476c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4734:	4b0e      	ldr	r3, [pc, #56]	; (d4770 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4736:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4738:	2500      	movs	r5, #0
   d473a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d473c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4740:	6063      	str	r3, [r4, #4]
   d4742:	60a5      	str	r5, [r4, #8]
   d4744:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4748:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d474c:	f7ff fdb2 	bl	d42b4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4750:	4b08      	ldr	r3, [pc, #32]	; (d4774 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4752:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4756:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d475a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d475c:	4620      	mov	r0, r4
   d475e:	4a06      	ldr	r2, [pc, #24]	; (d4778 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4760:	4906      	ldr	r1, [pc, #24]	; (d477c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4766:	f000 bd12 	b.w	d518e <__aeabi_atexit>
   d476a:	bf00      	nop
   d476c:	2003e4b0 	.word	0x2003e4b0
   d4770:	000d5664 	.word	0x000d5664
   d4774:	000d5698 	.word	0x000d5698
   d4778:	2003e4a4 	.word	0x2003e4a4
   d477c:	000d4719 	.word	0x000d4719

000d4780 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4780:	4770      	bx	lr

000d4782 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4784:	4606      	mov	r6, r0
   d4786:	4615      	mov	r5, r2
   d4788:	460c      	mov	r4, r1
   d478a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d478c:	42bc      	cmp	r4, r7
   d478e:	d006      	beq.n	d479e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4790:	6833      	ldr	r3, [r6, #0]
   d4792:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4796:	689b      	ldr	r3, [r3, #8]
   d4798:	4630      	mov	r0, r6
   d479a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d479c:	e7f6      	b.n	d478c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d479e:	4628      	mov	r0, r5
   d47a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47a2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d47a2:	2200      	movs	r2, #0
   d47a4:	7c00      	ldrb	r0, [r0, #16]
   d47a6:	f7ff bced 	b.w	d4184 <HAL_I2C_Write_Data>

000d47aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d47aa:	2100      	movs	r1, #0
   d47ac:	7c00      	ldrb	r0, [r0, #16]
   d47ae:	f7ff bcf1 	b.w	d4194 <HAL_I2C_Available_Data>

000d47b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d47b2:	2100      	movs	r1, #0
   d47b4:	7c00      	ldrb	r0, [r0, #16]
   d47b6:	f7ff bcf5 	b.w	d41a4 <HAL_I2C_Read_Data>

000d47ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d47ba:	2100      	movs	r1, #0
   d47bc:	7c00      	ldrb	r0, [r0, #16]
   d47be:	f7ff bcf9 	b.w	d41b4 <HAL_I2C_Peek_Data>

000d47c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d47c2:	2100      	movs	r1, #0
   d47c4:	7c00      	ldrb	r0, [r0, #16]
   d47c6:	f7ff bcfd 	b.w	d41c4 <HAL_I2C_Flush_Data>

000d47ca <_ZN7TwoWireD0Ev>:
   d47ca:	b510      	push	{r4, lr}
   d47cc:	2114      	movs	r1, #20
   d47ce:	4604      	mov	r4, r0
   d47d0:	f000 fcea 	bl	d51a8 <_ZdlPvj>
   d47d4:	4620      	mov	r0, r4
   d47d6:	bd10      	pop	{r4, pc}

000d47d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47d8:	b510      	push	{r4, lr}
   d47da:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d47dc:	2300      	movs	r3, #0
   d47de:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d47e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d47e4:	60a3      	str	r3, [r4, #8]
   d47e6:	4b04      	ldr	r3, [pc, #16]	; (d47f8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d47e8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47ea:	4608      	mov	r0, r1
   d47ec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d47ee:	4611      	mov	r1, r2
   d47f0:	f7ff fcf8 	bl	d41e4 <HAL_I2C_Init>
}
   d47f4:	4620      	mov	r0, r4
   d47f6:	bd10      	pop	{r4, pc}
   d47f8:	000d56cc 	.word	0x000d56cc

000d47fc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d47fc:	2100      	movs	r1, #0
   d47fe:	7c00      	ldrb	r0, [r0, #16]
   d4800:	f7ff bce8 	b.w	d41d4 <HAL_I2C_Is_Enabled>

000d4804 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4804:	7441      	strb	r1, [r0, #17]
   d4806:	4770      	bx	lr

000d4808 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4808:	4770      	bx	lr

000d480a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d480a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d480c:	2100      	movs	r1, #0
   d480e:	7c00      	ldrb	r0, [r0, #16]
   d4810:	f7ff fca0 	bl	d4154 <HAL_USB_USART_Receive_Data>
}
   d4814:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4818:	bf28      	it	cs
   d481a:	f04f 30ff 	movcs.w	r0, #4294967295
   d481e:	bd08      	pop	{r3, pc}

000d4820 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4820:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4822:	2101      	movs	r1, #1
   d4824:	7c00      	ldrb	r0, [r0, #16]
   d4826:	f7ff fc95 	bl	d4154 <HAL_USB_USART_Receive_Data>
}
   d482a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d482e:	bf28      	it	cs
   d4830:	f04f 30ff 	movcs.w	r0, #4294967295
   d4834:	bd08      	pop	{r3, pc}

000d4836 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4836:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4838:	7c00      	ldrb	r0, [r0, #16]
   d483a:	f7ff fc83 	bl	d4144 <HAL_USB_USART_Available_Data_For_Write>
}
   d483e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4842:	bd08      	pop	{r3, pc}

000d4844 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4844:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4846:	7c00      	ldrb	r0, [r0, #16]
   d4848:	f7ff fc74 	bl	d4134 <HAL_USB_USART_Available_Data>
}
   d484c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4850:	bd08      	pop	{r3, pc}

000d4852 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4852:	7c00      	ldrb	r0, [r0, #16]
   d4854:	f7ff bc8e 	b.w	d4174 <HAL_USB_USART_Flush_Data>

000d4858 <_ZN9USBSerialD0Ev>:
   d4858:	b510      	push	{r4, lr}
   d485a:	2114      	movs	r1, #20
   d485c:	4604      	mov	r4, r0
   d485e:	f000 fca3 	bl	d51a8 <_ZdlPvj>
   d4862:	4620      	mov	r0, r4
   d4864:	bd10      	pop	{r4, pc}

000d4866 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4866:	b538      	push	{r3, r4, r5, lr}
   d4868:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d486a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d486c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d486e:	f7ff fc69 	bl	d4144 <HAL_USB_USART_Available_Data_For_Write>
   d4872:	2800      	cmp	r0, #0
   d4874:	dc01      	bgt.n	d487a <_ZN9USBSerial5writeEh+0x14>
   d4876:	7c60      	ldrb	r0, [r4, #17]
   d4878:	b128      	cbz	r0, d4886 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d487a:	4629      	mov	r1, r5
   d487c:	7c20      	ldrb	r0, [r4, #16]
   d487e:	f7ff fc71 	bl	d4164 <HAL_USB_USART_Send_Data>
   d4882:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4886:	bd38      	pop	{r3, r4, r5, pc}

000d4888 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4888:	b510      	push	{r4, lr}
   d488a:	4604      	mov	r4, r0
   d488c:	2300      	movs	r3, #0
   d488e:	6063      	str	r3, [r4, #4]
   d4890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4894:	60a3      	str	r3, [r4, #8]
   d4896:	4b05      	ldr	r3, [pc, #20]	; (d48ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4898:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d489a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d489c:	4608      	mov	r0, r1
{
  _serial = serial;
   d489e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d48a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d48a2:	4611      	mov	r1, r2
   d48a4:	f7ff fc3e 	bl	d4124 <HAL_USB_USART_Init>
}
   d48a8:	4620      	mov	r0, r4
   d48aa:	bd10      	pop	{r4, pc}
   d48ac:	000d56f4 	.word	0x000d56f4

000d48b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d48b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d48b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d48b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d48b6:	2100      	movs	r1, #0
   d48b8:	f000 fdef 	bl	d549a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d48bc:	4620      	mov	r0, r4
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d48c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d48c2:	4d0e      	ldr	r5, [pc, #56]	; (d48fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d48c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d48c6:	a801      	add	r0, sp, #4
   d48c8:	f7ff fff2 	bl	d48b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d48cc:	6829      	ldr	r1, [r5, #0]
   d48ce:	f011 0401 	ands.w	r4, r1, #1
   d48d2:	d110      	bne.n	d48f6 <_Z16_fetch_usbserialv+0x36>
   d48d4:	4628      	mov	r0, r5
   d48d6:	f7ff fbe4 	bl	d40a2 <__cxa_guard_acquire>
   d48da:	b160      	cbz	r0, d48f6 <_Z16_fetch_usbserialv+0x36>
   d48dc:	aa01      	add	r2, sp, #4
   d48de:	4621      	mov	r1, r4
   d48e0:	4807      	ldr	r0, [pc, #28]	; (d4900 <_Z16_fetch_usbserialv+0x40>)
   d48e2:	f7ff ffd1 	bl	d4888 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d48e6:	4628      	mov	r0, r5
   d48e8:	f7ff fbe0 	bl	d40ac <__cxa_guard_release>
   d48ec:	4a05      	ldr	r2, [pc, #20]	; (d4904 <_Z16_fetch_usbserialv+0x44>)
   d48ee:	4906      	ldr	r1, [pc, #24]	; (d4908 <_Z16_fetch_usbserialv+0x48>)
   d48f0:	4803      	ldr	r0, [pc, #12]	; (d4900 <_Z16_fetch_usbserialv+0x40>)
   d48f2:	f000 fc4c 	bl	d518e <__aeabi_atexit>
	return _usbserial;
}
   d48f6:	4802      	ldr	r0, [pc, #8]	; (d4900 <_Z16_fetch_usbserialv+0x40>)
   d48f8:	b007      	add	sp, #28
   d48fa:	bd30      	pop	{r4, r5, pc}
   d48fc:	2003e684 	.word	0x2003e684
   d4900:	2003e688 	.word	0x2003e688
   d4904:	2003e4a4 	.word	0x2003e4a4
   d4908:	000d4809 	.word	0x000d4809

000d490c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d490c:	4770      	bx	lr

000d490e <_ZN9IPAddressD0Ev>:
   d490e:	b510      	push	{r4, lr}
   d4910:	2118      	movs	r1, #24
   d4912:	4604      	mov	r4, r0
   d4914:	f000 fc48 	bl	d51a8 <_ZdlPvj>
   d4918:	4620      	mov	r0, r4
   d491a:	bd10      	pop	{r4, pc}

000d491c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d491c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d491e:	7d03      	ldrb	r3, [r0, #20]
   d4920:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4922:	b08d      	sub	sp, #52	; 0x34
   d4924:	460e      	mov	r6, r1
   d4926:	f100 0704 	add.w	r7, r0, #4
   d492a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d492e:	d002      	beq.n	d4936 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4930:	f100 0508 	add.w	r5, r0, #8
   d4934:	e018      	b.n	d4968 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4936:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4938:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d493a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d493e:	232f      	movs	r3, #47	; 0x2f
   d4940:	462a      	mov	r2, r5
   d4942:	200a      	movs	r0, #10
   d4944:	f7ff fc96 	bl	d4274 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4948:	4628      	mov	r0, r5
   d494a:	f000 fdd7 	bl	d54fc <strlen>
   d494e:	6833      	ldr	r3, [r6, #0]
   d4950:	4602      	mov	r2, r0
   d4952:	68db      	ldr	r3, [r3, #12]
   d4954:	4629      	mov	r1, r5
   d4956:	4630      	mov	r0, r6
   d4958:	4798      	blx	r3
   d495a:	e00f      	b.n	d497c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d495c:	b124      	cbz	r4, d4968 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d495e:	212e      	movs	r1, #46	; 0x2e
   d4960:	4630      	mov	r0, r6
   d4962:	f000 f99b 	bl	d4c9c <_ZN5Print5printEc>
   d4966:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4968:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d496c:	220a      	movs	r2, #10
   d496e:	4630      	mov	r0, r6
   d4970:	f000 f997 	bl	d4ca2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4974:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4976:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4978:	d1f0      	bne.n	d495c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d497a:	4620      	mov	r0, r4
    }
    return n;
}
   d497c:	b00d      	add	sp, #52	; 0x34
   d497e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4980 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4980:	b510      	push	{r4, lr}
   d4982:	4b05      	ldr	r3, [pc, #20]	; (d4998 <_ZN9IPAddressC1Ev+0x18>)
   d4984:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4986:	2211      	movs	r2, #17
   d4988:	f840 3b04 	str.w	r3, [r0], #4
   d498c:	2100      	movs	r1, #0
   d498e:	f000 fd84 	bl	d549a <memset>
{
    clear();
}
   d4992:	4620      	mov	r0, r4
   d4994:	bd10      	pop	{r4, pc}
   d4996:	bf00      	nop
   d4998:	000d5724 	.word	0x000d5724

000d499c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d499c:	4603      	mov	r3, r0
   d499e:	4a07      	ldr	r2, [pc, #28]	; (d49bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d49a0:	b510      	push	{r4, lr}
   d49a2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d49a6:	f101 0210 	add.w	r2, r1, #16
   d49aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d49ae:	f843 4b04 	str.w	r4, [r3], #4
   d49b2:	4291      	cmp	r1, r2
   d49b4:	d1f9      	bne.n	d49aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d49b6:	780a      	ldrb	r2, [r1, #0]
   d49b8:	701a      	strb	r2, [r3, #0]
}
   d49ba:	bd10      	pop	{r4, pc}
   d49bc:	000d5724 	.word	0x000d5724

000d49c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d49c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d49c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d49c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d49ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d49ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d49d2:	2304      	movs	r3, #4
   d49d4:	6041      	str	r1, [r0, #4]
   d49d6:	7503      	strb	r3, [r0, #20]
   d49d8:	bd10      	pop	{r4, pc}

000d49da <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d49da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d49dc:	780d      	ldrb	r5, [r1, #0]
   d49de:	788b      	ldrb	r3, [r1, #2]
   d49e0:	784a      	ldrb	r2, [r1, #1]
   d49e2:	78c9      	ldrb	r1, [r1, #3]
   d49e4:	9100      	str	r1, [sp, #0]
   d49e6:	4629      	mov	r1, r5
   d49e8:	f7ff ffea 	bl	d49c0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d49ec:	b003      	add	sp, #12
   d49ee:	bd30      	pop	{r4, r5, pc}

000d49f0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49f0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49f2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49f4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49f6:	b113      	cbz	r3, d49fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49f8:	2203      	movs	r2, #3
   d49fa:	4601      	mov	r1, r0
   d49fc:	4798      	blx	r3
    }
   d49fe:	4620      	mov	r0, r4
   d4a00:	bd10      	pop	{r4, pc}

000d4a02 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4a02:	b510      	push	{r4, lr}
   d4a04:	b088      	sub	sp, #32
   d4a06:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a08:	4668      	mov	r0, sp
   d4a0a:	f000 fae0 	bl	d4fce <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4a0e:	4669      	mov	r1, sp
   d4a10:	a804      	add	r0, sp, #16
   d4a12:	f000 fafe 	bl	d5012 <_ZN6StringC1ERKS_>
   d4a16:	a804      	add	r0, sp, #16
   d4a18:	47a0      	blx	r4
   d4a1a:	4604      	mov	r4, r0
   d4a1c:	a804      	add	r0, sp, #16
   d4a1e:	f000 fa8f 	bl	d4f40 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a22:	4668      	mov	r0, sp
   d4a24:	f000 fa8c 	bl	d4f40 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4a28:	4620      	mov	r0, r4
   d4a2a:	b008      	add	sp, #32
   d4a2c:	bd10      	pop	{r4, pc}

000d4a2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4a30:	2410      	movs	r4, #16
   d4a32:	b085      	sub	sp, #20
   d4a34:	4607      	mov	r7, r0
   d4a36:	460e      	mov	r6, r1
   d4a38:	4615      	mov	r5, r2
   d4a3a:	2100      	movs	r1, #0
   d4a3c:	4622      	mov	r2, r4
   d4a3e:	4668      	mov	r0, sp
   d4a40:	f000 fd2b 	bl	d549a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a44:	2200      	movs	r2, #0
   d4a46:	4669      	mov	r1, sp
   d4a48:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4a4a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4a4e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4a50:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4a52:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a54:	f7ff fc9e 	bl	d4394 <spark_function>
}
   d4a58:	b005      	add	sp, #20
   d4a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a5c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4a5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a5e:	4b0c      	ldr	r3, [pc, #48]	; (d4a90 <serialEventRun+0x34>)
   d4a60:	b133      	cbz	r3, d4a70 <serialEventRun+0x14>
   d4a62:	f7ff ff2d 	bl	d48c0 <_Z16_fetch_usbserialv>
   d4a66:	6803      	ldr	r3, [r0, #0]
   d4a68:	691b      	ldr	r3, [r3, #16]
   d4a6a:	4798      	blx	r3
   d4a6c:	2800      	cmp	r0, #0
   d4a6e:	dc09      	bgt.n	d4a84 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4a70:	4b08      	ldr	r3, [pc, #32]	; (d4a94 <serialEventRun+0x38>)
   d4a72:	b163      	cbz	r3, d4a8e <serialEventRun+0x32>
   d4a74:	f000 f9ae 	bl	d4dd4 <_Z22__fetch_global_Serial1v>
   d4a78:	6803      	ldr	r3, [r0, #0]
   d4a7a:	691b      	ldr	r3, [r3, #16]
   d4a7c:	4798      	blx	r3
   d4a7e:	2800      	cmp	r0, #0
   d4a80:	dc03      	bgt.n	d4a8a <serialEventRun+0x2e>
   d4a82:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4a84:	f3af 8000 	nop.w
   d4a88:	e7f2      	b.n	d4a70 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4a8a:	f3af 8000 	nop.w
   d4a8e:	bd08      	pop	{r3, pc}
	...

000d4a98 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4a98:	b508      	push	{r3, lr}
	serialEventRun();
   d4a9a:	f7ff ffdf 	bl	d4a5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a9e:	f7ff fc21 	bl	d42e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4aa2:	4b01      	ldr	r3, [pc, #4]	; (d4aa8 <_post_loop+0x10>)
   d4aa4:	6018      	str	r0, [r3, #0]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	2003e73c 	.word	0x2003e73c

000d4aac <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4aac:	4802      	ldr	r0, [pc, #8]	; (d4ab8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4aae:	4a03      	ldr	r2, [pc, #12]	; (d4abc <_Z33system_initialize_user_backup_ramv+0x10>)
   d4ab0:	4903      	ldr	r1, [pc, #12]	; (d4ac0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4ab2:	1a12      	subs	r2, r2, r0
   d4ab4:	f000 bce6 	b.w	d5484 <memcpy>
   d4ab8:	2003f400 	.word	0x2003f400
   d4abc:	2003f404 	.word	0x2003f404
   d4ac0:	000d5a80 	.word	0x000d5a80

000d4ac4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ac4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ac6:	2300      	movs	r3, #0
   d4ac8:	9300      	str	r3, [sp, #0]
   d4aca:	461a      	mov	r2, r3
   d4acc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ad0:	f7ff fcd2 	bl	d4478 <system_ctrl_set_result>
}
   d4ad4:	b003      	add	sp, #12
   d4ad6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4adc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4adc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ade:	8843      	ldrh	r3, [r0, #2]
   d4ae0:	2b0a      	cmp	r3, #10
   d4ae2:	d008      	beq.n	d4af6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ae4:	2b50      	cmp	r3, #80	; 0x50
   d4ae6:	d109      	bne.n	d4afc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ae8:	4b09      	ldr	r3, [pc, #36]	; (d4b10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4aea:	681b      	ldr	r3, [r3, #0]
   d4aec:	b13b      	cbz	r3, d4afe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4aee:	b003      	add	sp, #12
   d4af0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4af4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4af6:	f7ff ffe5 	bl	d4ac4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4afa:	e006      	b.n	d4b0a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4afc:	2300      	movs	r3, #0
   d4afe:	9300      	str	r3, [sp, #0]
   d4b00:	461a      	mov	r2, r3
   d4b02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b06:	f7ff fcb7 	bl	d4478 <system_ctrl_set_result>
        break;
    }
}
   d4b0a:	b003      	add	sp, #12
   d4b0c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b10:	2003e69c 	.word	0x2003e69c

000d4b14 <module_user_init_hook>:

void module_user_init_hook()
{
   d4b14:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4b16:	4c10      	ldr	r4, [pc, #64]	; (d4b58 <module_user_init_hook+0x44>)
   d4b18:	4d10      	ldr	r5, [pc, #64]	; (d4b5c <module_user_init_hook+0x48>)
   d4b1a:	6823      	ldr	r3, [r4, #0]
   d4b1c:	42ab      	cmp	r3, r5
   d4b1e:	4b10      	ldr	r3, [pc, #64]	; (d4b60 <module_user_init_hook+0x4c>)
   d4b20:	bf0c      	ite	eq
   d4b22:	2201      	moveq	r2, #1
   d4b24:	2200      	movne	r2, #0
   d4b26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4b28:	d002      	beq.n	d4b30 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4b2a:	f7ff ffbf 	bl	d4aac <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4b2e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4b30:	f7ff fbd0 	bl	d42d4 <HAL_RNG_GetRandomNumber>
   d4b34:	4604      	mov	r4, r0
    srand(seed);
   d4b36:	f000 fcb9 	bl	d54ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b3a:	4b0a      	ldr	r3, [pc, #40]	; (d4b64 <module_user_init_hook+0x50>)
   d4b3c:	b113      	cbz	r3, d4b44 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4b3e:	4620      	mov	r0, r4
   d4b40:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b44:	2100      	movs	r1, #0
   d4b46:	4807      	ldr	r0, [pc, #28]	; (d4b64 <module_user_init_hook+0x50>)
   d4b48:	f7ff fc2c 	bl	d43a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b4c:	2100      	movs	r1, #0
   d4b4e:	4806      	ldr	r0, [pc, #24]	; (d4b68 <module_user_init_hook+0x54>)
}
   d4b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b54:	f7ff bc86 	b.w	d4464 <system_ctrl_set_app_request_handler>
   d4b58:	2003f400 	.word	0x2003f400
   d4b5c:	9a271c1e 	.word	0x9a271c1e
   d4b60:	2003e6a0 	.word	0x2003e6a0
   d4b64:	00000000 	.word	0x00000000
   d4b68:	000d4add 	.word	0x000d4add

000d4b6c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4b6c:	2200      	movs	r2, #0
   d4b6e:	4611      	mov	r1, r2
   d4b70:	6840      	ldr	r0, [r0, #4]
   d4b72:	f7ff bc37 	b.w	d43e4 <network_ready>

000d4b76 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b76:	2200      	movs	r2, #0
   d4b78:	4611      	mov	r1, r2
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	f7ff bc52 	b.w	d4424 <network_listening>

000d4b80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b80:	2200      	movs	r2, #0
   d4b82:	4611      	mov	r1, r2
   d4b84:	6840      	ldr	r0, [r0, #4]
   d4b86:	f7ff bc5d 	b.w	d4444 <network_get_listen_timeout>

000d4b8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b8a:	2200      	movs	r2, #0
   d4b8c:	6840      	ldr	r0, [r0, #4]
   d4b8e:	f7ff bc51 	b.w	d4434 <network_set_listen_timeout>

000d4b92 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b92:	2200      	movs	r2, #0
   d4b94:	f081 0101 	eor.w	r1, r1, #1
   d4b98:	6840      	ldr	r0, [r0, #4]
   d4b9a:	f7ff bc3b 	b.w	d4414 <network_listen>

000d4b9e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	461a      	mov	r2, r3
   d4ba2:	4619      	mov	r1, r3
   d4ba4:	6840      	ldr	r0, [r0, #4]
   d4ba6:	f7ff bc2d 	b.w	d4404 <network_off>

000d4baa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4baa:	2300      	movs	r3, #0
   d4bac:	461a      	mov	r2, r3
   d4bae:	4619      	mov	r1, r3
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	f7ff bc1f 	b.w	d43f4 <network_on>

000d4bb6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	4611      	mov	r1, r2
   d4bba:	6840      	ldr	r0, [r0, #4]
   d4bbc:	f7ff bc02 	b.w	d43c4 <network_connecting>

000d4bc0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	2102      	movs	r1, #2
   d4bc4:	6840      	ldr	r0, [r0, #4]
   d4bc6:	f7ff bc05 	b.w	d43d4 <network_disconnect>

000d4bca <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4bca:	2300      	movs	r3, #0
   d4bcc:	461a      	mov	r2, r3
   d4bce:	6840      	ldr	r0, [r0, #4]
   d4bd0:	f7ff bbf0 	b.w	d43b4 <network_connect>

000d4bd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4bd4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4bd6:	4c08      	ldr	r4, [pc, #32]	; (d4bf8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4bd8:	2528      	movs	r5, #40	; 0x28
   d4bda:	462a      	mov	r2, r5
   d4bdc:	2100      	movs	r1, #0
   d4bde:	4620      	mov	r0, r4
   d4be0:	f000 fc5b 	bl	d549a <memset>
        cid = -1;
   d4be4:	f04f 33ff 	mov.w	r3, #4294967295
   d4be8:	6063      	str	r3, [r4, #4]
   d4bea:	4b04      	ldr	r3, [pc, #16]	; (d4bfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4bec:	8025      	strh	r5, [r4, #0]
   d4bee:	2204      	movs	r2, #4
   d4bf0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4bf2:	4a03      	ldr	r2, [pc, #12]	; (d4c00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4bf4:	601a      	str	r2, [r3, #0]
   d4bf6:	bd38      	pop	{r3, r4, r5, pc}
   d4bf8:	2003e6ac 	.word	0x2003e6ac
   d4bfc:	2003e6a4 	.word	0x2003e6a4
   d4c00:	000d5738 	.word	0x000d5738

000d4c04 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c04:	b510      	push	{r4, lr}
   d4c06:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c08:	f7ff fef2 	bl	d49f0 <_ZNSt14_Function_baseD1Ev>
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c10:	4803      	ldr	r0, [pc, #12]	; (d4c20 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c12:	4a04      	ldr	r2, [pc, #16]	; (d4c24 <_GLOBAL__sub_I_RGB+0x14>)
   d4c14:	4904      	ldr	r1, [pc, #16]	; (d4c28 <_GLOBAL__sub_I_RGB+0x18>)
   d4c16:	2300      	movs	r3, #0
   d4c18:	6083      	str	r3, [r0, #8]
   d4c1a:	f000 bab8 	b.w	d518e <__aeabi_atexit>
   d4c1e:	bf00      	nop
   d4c20:	2003e6d4 	.word	0x2003e6d4
   d4c24:	2003e4a4 	.word	0x2003e4a4
   d4c28:	000d4c05 	.word	0x000d4c05

000d4c2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4c2c:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4c2e:	681a      	ldr	r2, [r3, #0]
   d4c30:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4c32:	601a      	str	r2, [r3, #0]
   d4c34:	4770      	bx	lr
   d4c36:	bf00      	nop
   d4c38:	2003e438 	.word	0x2003e438
   d4c3c:	2003e6e4 	.word	0x2003e6e4

000d4c40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c40:	4b01      	ldr	r3, [pc, #4]	; (d4c48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c42:	4a02      	ldr	r2, [pc, #8]	; (d4c4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c44:	601a      	str	r2, [r3, #0]
   d4c46:	4770      	bx	lr
   d4c48:	2003e6e8 	.word	0x2003e6e8
   d4c4c:	000d5800 	.word	0x000d5800

000d4c50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c52:	4606      	mov	r6, r0
   d4c54:	460d      	mov	r5, r1
   d4c56:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c58:	2400      	movs	r4, #0
  while (size--) {
   d4c5a:	42bd      	cmp	r5, r7
   d4c5c:	d00c      	beq.n	d4c78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c5e:	6833      	ldr	r3, [r6, #0]
   d4c60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c64:	689b      	ldr	r3, [r3, #8]
   d4c66:	4630      	mov	r0, r6
   d4c68:	4798      	blx	r3
     if (chunk>=0)
   d4c6a:	2800      	cmp	r0, #0
   d4c6c:	db01      	blt.n	d4c72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c70:	e7f3      	b.n	d4c5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c72:	2c00      	cmp	r4, #0
   d4c74:	bf08      	it	eq
   d4c76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c78:	4620      	mov	r0, r4
   d4c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c7c:	b570      	push	{r4, r5, r6, lr}
   d4c7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c84:	b149      	cbz	r1, d4c9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c86:	f000 fc39 	bl	d54fc <strlen>
   d4c8a:	682b      	ldr	r3, [r5, #0]
   d4c8c:	4602      	mov	r2, r0
   d4c8e:	4621      	mov	r1, r4
   d4c90:	4628      	mov	r0, r5
   d4c92:	68db      	ldr	r3, [r3, #12]
    }
   d4c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c98:	4718      	bx	r3
    }
   d4c9a:	bd70      	pop	{r4, r5, r6, pc}

000d4c9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c9c:	6803      	ldr	r3, [r0, #0]
   d4c9e:	689b      	ldr	r3, [r3, #8]
   d4ca0:	4718      	bx	r3

000d4ca2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ca2:	b530      	push	{r4, r5, lr}
   d4ca4:	b08b      	sub	sp, #44	; 0x2c
   d4ca6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ca8:	2100      	movs	r1, #0
   d4caa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4cae:	2a01      	cmp	r2, #1
   d4cb0:	bf98      	it	ls
   d4cb2:	220a      	movls	r2, #10
   d4cb4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4cb8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4cbc:	fb05 3312 	mls	r3, r5, r2, r3
   d4cc0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cc4:	2b09      	cmp	r3, #9
   d4cc6:	bf94      	ite	ls
   d4cc8:	3330      	addls	r3, #48	; 0x30
   d4cca:	3337      	addhi	r3, #55	; 0x37
   d4ccc:	b2db      	uxtb	r3, r3
   d4cce:	4621      	mov	r1, r4
   d4cd0:	f804 3901 	strb.w	r3, [r4], #-1
   d4cd4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4cd6:	2d00      	cmp	r5, #0
   d4cd8:	d1ee      	bne.n	d4cb8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4cda:	f7ff ffcf 	bl	d4c7c <_ZN5Print5writeEPKc>
}
   d4cde:	b00b      	add	sp, #44	; 0x2c
   d4ce0:	bd30      	pop	{r4, r5, pc}

000d4ce2 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d4ce2:	b510      	push	{r4, lr}
   d4ce4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ce6:	6800      	ldr	r0, [r0, #0]
   d4ce8:	b108      	cbz	r0, d4cee <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cea:	f7ff faeb 	bl	d42c4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4cee:	4620      	mov	r0, r4
   d4cf0:	bd10      	pop	{r4, pc}
	...

000d4cf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4cf4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4cf6:	4c06      	ldr	r4, [pc, #24]	; (d4d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4cf8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4cfa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4cfc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4cfe:	f7ff fad9 	bl	d42b4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d02:	4620      	mov	r0, r4
   d4d04:	4a03      	ldr	r2, [pc, #12]	; (d4d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d06:	4904      	ldr	r1, [pc, #16]	; (d4d18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d0c:	f000 ba3f 	b.w	d518e <__aeabi_atexit>
   d4d10:	2003e6ec 	.word	0x2003e6ec
   d4d14:	2003e4a4 	.word	0x2003e4a4
   d4d18:	000d4ce3 	.word	0x000d4ce3

000d4d1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d1c:	4770      	bx	lr

000d4d1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d1e:	7441      	strb	r1, [r0, #17]
   d4d20:	4770      	bx	lr

000d4d22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d24:	7c00      	ldrb	r0, [r0, #16]
   d4d26:	f7ff fa9d 	bl	d4264 <HAL_USART_Available_Data_For_Write>
}
   d4d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d2e:	bd08      	pop	{r3, pc}

000d4d30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d32:	7c00      	ldrb	r0, [r0, #16]
   d4d34:	f7ff fa6e 	bl	d4214 <HAL_USART_Available_Data>
}
   d4d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d3c:	bd08      	pop	{r3, pc}

000d4d3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4d40:	7c00      	ldrb	r0, [r0, #16]
   d4d42:	f7ff fa77 	bl	d4234 <HAL_USART_Peek_Data>
}
   d4d46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d4a:	bf28      	it	cs
   d4d4c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d50:	bd08      	pop	{r3, pc}

000d4d52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d54:	7c00      	ldrb	r0, [r0, #16]
   d4d56:	f7ff fa65 	bl	d4224 <HAL_USART_Read_Data>
}
   d4d5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d5e:	bf28      	it	cs
   d4d60:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d64:	bd08      	pop	{r3, pc}

000d4d66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d66:	7c00      	ldrb	r0, [r0, #16]
   d4d68:	f7ff ba6c 	b.w	d4244 <HAL_USART_Flush_Data>

000d4d6c <_ZN11USARTSerialD0Ev>:
   d4d6c:	b510      	push	{r4, lr}
   d4d6e:	2114      	movs	r1, #20
   d4d70:	4604      	mov	r4, r0
   d4d72:	f000 fa19 	bl	d51a8 <_ZdlPvj>
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd10      	pop	{r4, pc}

000d4d7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d7e:	4604      	mov	r4, r0
   d4d80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d82:	b925      	cbnz	r5, d4d8e <_ZN11USARTSerial5writeEh+0x14>
   d4d84:	7c00      	ldrb	r0, [r0, #16]
   d4d86:	f7ff fa6d 	bl	d4264 <HAL_USART_Available_Data_For_Write>
   d4d8a:	2800      	cmp	r0, #0
   d4d8c:	dd05      	ble.n	d4d9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d8e:	4631      	mov	r1, r6
   d4d90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d96:	f7ff ba35 	b.w	d4204 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d9a:	4628      	mov	r0, r5
   d4d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4da0:	b510      	push	{r4, lr}
   d4da2:	4604      	mov	r4, r0
   d4da4:	4608      	mov	r0, r1
   d4da6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4da8:	2200      	movs	r2, #0
   d4daa:	6062      	str	r2, [r4, #4]
   d4dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4db0:	60a2      	str	r2, [r4, #8]
   d4db2:	4a05      	ldr	r2, [pc, #20]	; (d4dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4db4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4db6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4db8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4dba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4dbc:	461a      	mov	r2, r3
   d4dbe:	f7ff fa19 	bl	d41f4 <HAL_USART_Init>
}
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	bd10      	pop	{r4, pc}
   d4dc6:	bf00      	nop
   d4dc8:	000d5878 	.word	0x000d5878

000d4dcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4dcc:	7c00      	ldrb	r0, [r0, #16]
   d4dce:	f7ff ba41 	b.w	d4254 <HAL_USART_Is_Enabled>
	...

000d4dd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d4dd6:	4c19      	ldr	r4, [pc, #100]	; (d4e3c <_Z22__fetch_global_Serial1v+0x68>)
   d4dd8:	6825      	ldr	r5, [r4, #0]
   d4dda:	b94d      	cbnz	r5, d4df0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d4ddc:	2084      	movs	r0, #132	; 0x84
   d4dde:	f7ff f95a 	bl	d4096 <_Znwj>
   d4de2:	4606      	mov	r6, r0
   d4de4:	b118      	cbz	r0, d4dee <_Z22__fetch_global_Serial1v+0x1a>
   d4de6:	2284      	movs	r2, #132	; 0x84
   d4de8:	4629      	mov	r1, r5
   d4dea:	f000 fb56 	bl	d549a <memset>
   d4dee:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d4df0:	4d13      	ldr	r5, [pc, #76]	; (d4e40 <_Z22__fetch_global_Serial1v+0x6c>)
   d4df2:	682e      	ldr	r6, [r5, #0]
   d4df4:	b94e      	cbnz	r6, d4e0a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d4df6:	2084      	movs	r0, #132	; 0x84
   d4df8:	f7ff f94d 	bl	d4096 <_Znwj>
   d4dfc:	4607      	mov	r7, r0
   d4dfe:	b118      	cbz	r0, d4e08 <_Z22__fetch_global_Serial1v+0x34>
   d4e00:	2284      	movs	r2, #132	; 0x84
   d4e02:	4631      	mov	r1, r6
   d4e04:	f000 fb49 	bl	d549a <memset>
   d4e08:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4e0a:	4f0e      	ldr	r7, [pc, #56]	; (d4e44 <_Z22__fetch_global_Serial1v+0x70>)
   d4e0c:	6839      	ldr	r1, [r7, #0]
   d4e0e:	f011 0601 	ands.w	r6, r1, #1
   d4e12:	d111      	bne.n	d4e38 <_Z22__fetch_global_Serial1v+0x64>
   d4e14:	4638      	mov	r0, r7
   d4e16:	f7ff f944 	bl	d40a2 <__cxa_guard_acquire>
   d4e1a:	b168      	cbz	r0, d4e38 <_Z22__fetch_global_Serial1v+0x64>
   d4e1c:	6822      	ldr	r2, [r4, #0]
   d4e1e:	682b      	ldr	r3, [r5, #0]
   d4e20:	4809      	ldr	r0, [pc, #36]	; (d4e48 <_Z22__fetch_global_Serial1v+0x74>)
   d4e22:	4631      	mov	r1, r6
   d4e24:	f7ff ffbc 	bl	d4da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e28:	4638      	mov	r0, r7
   d4e2a:	f7ff f93f 	bl	d40ac <__cxa_guard_release>
   d4e2e:	4a07      	ldr	r2, [pc, #28]	; (d4e4c <_Z22__fetch_global_Serial1v+0x78>)
   d4e30:	4907      	ldr	r1, [pc, #28]	; (d4e50 <_Z22__fetch_global_Serial1v+0x7c>)
   d4e32:	4805      	ldr	r0, [pc, #20]	; (d4e48 <_Z22__fetch_global_Serial1v+0x74>)
   d4e34:	f000 f9ab 	bl	d518e <__aeabi_atexit>
#endif
	return serial1;
}
   d4e38:	4803      	ldr	r0, [pc, #12]	; (d4e48 <_Z22__fetch_global_Serial1v+0x74>)
   d4e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e3c:	2003e70c 	.word	0x2003e70c
   d4e40:	2003e704 	.word	0x2003e704
   d4e44:	2003e708 	.word	0x2003e708
   d4e48:	2003e6f0 	.word	0x2003e6f0
   d4e4c:	2003e4a4 	.word	0x2003e4a4
   d4e50:	000d4d1d 	.word	0x000d4d1d

000d4e54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4e54:	b510      	push	{r4, lr}
   d4e56:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4e58:	6800      	ldr	r0, [r0, #0]
   d4e5a:	b118      	cbz	r0, d4e64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4e5c:	f7ff fb1e 	bl	d449c <free>
            wakeupSource_ = nullptr;
   d4e60:	2300      	movs	r3, #0
   d4e62:	6023      	str	r3, [r4, #0]
   d4e64:	bd10      	pop	{r4, pc}

000d4e66 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e66:	b510      	push	{r4, lr}
   d4e68:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4e6a:	f7ff fff3 	bl	d4e54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e6e:	4620      	mov	r0, r4
   d4e70:	bd10      	pop	{r4, pc}
	...

000d4e74 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e74:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e76:	4c09      	ldr	r4, [pc, #36]	; (d4e9c <_GLOBAL__sub_I_System+0x28>)
   d4e78:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e7e:	6020      	str	r0, [r4, #0]
   d4e80:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e82:	71a0      	strb	r0, [r4, #6]
   d4e84:	8120      	strh	r0, [r4, #8]
   d4e86:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e88:	f7ff fae4 	bl	d4454 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	4a04      	ldr	r2, [pc, #16]	; (d4ea0 <_GLOBAL__sub_I_System+0x2c>)
   d4e90:	4904      	ldr	r1, [pc, #16]	; (d4ea4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e96:	f000 b97a 	b.w	d518e <__aeabi_atexit>
   d4e9a:	bf00      	nop
   d4e9c:	2003e710 	.word	0x2003e710
   d4ea0:	2003e4a4 	.word	0x2003e4a4
   d4ea4:	000d4e67 	.word	0x000d4e67

000d4ea8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ea8:	b510      	push	{r4, lr}
   d4eaa:	4604      	mov	r4, r0
{
    _spi = spi;
   d4eac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4eae:	4608      	mov	r0, r1
   d4eb0:	f7ff fa20 	bl	d42f4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	6063      	str	r3, [r4, #4]
}
   d4eb8:	4620      	mov	r0, r4
   d4eba:	bd10      	pop	{r4, pc}

000d4ebc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4ebc:	7800      	ldrb	r0, [r0, #0]
   d4ebe:	f7ff ba21 	b.w	d4304 <HAL_SPI_Is_Enabled>

000d4ec2 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	4611      	mov	r1, r2
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	f7ff baac 	b.w	d4424 <network_listening>

000d4ecc <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	4611      	mov	r1, r2
   d4ed0:	6840      	ldr	r0, [r0, #4]
   d4ed2:	f7ff bab7 	b.w	d4444 <network_get_listen_timeout>

000d4ed6 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	6840      	ldr	r0, [r0, #4]
   d4eda:	f7ff baab 	b.w	d4434 <network_set_listen_timeout>

000d4ede <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ede:	2200      	movs	r2, #0
   d4ee0:	f081 0101 	eor.w	r1, r1, #1
   d4ee4:	6840      	ldr	r0, [r0, #4]
   d4ee6:	f7ff ba95 	b.w	d4414 <network_listen>

000d4eea <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4eea:	2300      	movs	r3, #0
   d4eec:	461a      	mov	r2, r3
   d4eee:	4619      	mov	r1, r3
   d4ef0:	6840      	ldr	r0, [r0, #4]
   d4ef2:	f7ff ba87 	b.w	d4404 <network_off>

000d4ef6 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	461a      	mov	r2, r3
   d4efa:	4619      	mov	r1, r3
   d4efc:	6840      	ldr	r0, [r0, #4]
   d4efe:	f7ff ba79 	b.w	d43f4 <network_on>

000d4f02 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f02:	2200      	movs	r2, #0
   d4f04:	4611      	mov	r1, r2
   d4f06:	6840      	ldr	r0, [r0, #4]
   d4f08:	f7ff ba6c 	b.w	d43e4 <network_ready>

000d4f0c <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	4611      	mov	r1, r2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff ba57 	b.w	d43c4 <network_connecting>

000d4f16 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	2102      	movs	r1, #2
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff ba5a 	b.w	d43d4 <network_disconnect>

000d4f20 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f20:	2300      	movs	r3, #0
   d4f22:	461a      	mov	r2, r3
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	f7ff ba45 	b.w	d43b4 <network_connect>
	...

000d4f2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4f2c:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f2e:	2203      	movs	r2, #3
   d4f30:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f32:	4a02      	ldr	r2, [pc, #8]	; (d4f3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f34:	601a      	str	r2, [r3, #0]
   d4f36:	4770      	bx	lr
   d4f38:	2003e71c 	.word	0x2003e71c
   d4f3c:	000d58a8 	.word	0x000d58a8

000d4f40 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f40:	b510      	push	{r4, lr}
   d4f42:	4604      	mov	r4, r0
{
	free(buffer);
   d4f44:	6800      	ldr	r0, [r0, #0]
   d4f46:	f7ff faa9 	bl	d449c <free>
}
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	bd10      	pop	{r4, pc}

000d4f4e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f4e:	b510      	push	{r4, lr}
   d4f50:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f52:	6800      	ldr	r0, [r0, #0]
   d4f54:	b108      	cbz	r0, d4f5a <_ZN6String10invalidateEv+0xc>
   d4f56:	f7ff faa1 	bl	d449c <free>
	buffer = NULL;
   d4f5a:	2300      	movs	r3, #0
   d4f5c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f5e:	60a3      	str	r3, [r4, #8]
   d4f60:	6063      	str	r3, [r4, #4]
   d4f62:	bd10      	pop	{r4, pc}

000d4f64 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f64:	b538      	push	{r3, r4, r5, lr}
   d4f66:	4604      	mov	r4, r0
   d4f68:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f6a:	6800      	ldr	r0, [r0, #0]
   d4f6c:	3101      	adds	r1, #1
   d4f6e:	f7ff fa9d 	bl	d44ac <realloc>
	if (newbuffer) {
   d4f72:	b110      	cbz	r0, d4f7a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f74:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f78:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f7a:	bd38      	pop	{r3, r4, r5, pc}

000d4f7c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f7c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f7e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f80:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f82:	b113      	cbz	r3, d4f8a <_ZN6String7reserveEj+0xe>
   d4f84:	6843      	ldr	r3, [r0, #4]
   d4f86:	428b      	cmp	r3, r1
   d4f88:	d207      	bcs.n	d4f9a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	f7ff ffea 	bl	d4f64 <_ZN6String12changeBufferEj>
   d4f90:	b120      	cbz	r0, d4f9c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4f92:	68a3      	ldr	r3, [r4, #8]
   d4f94:	b90b      	cbnz	r3, d4f9a <_ZN6String7reserveEj+0x1e>
   d4f96:	6822      	ldr	r2, [r4, #0]
   d4f98:	7013      	strb	r3, [r2, #0]
   d4f9a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4f9c:	bd10      	pop	{r4, pc}

000d4f9e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f9e:	b570      	push	{r4, r5, r6, lr}
   d4fa0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4fa2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fa4:	4604      	mov	r4, r0
   d4fa6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4fa8:	f7ff ffe8 	bl	d4f7c <_ZN6String7reserveEj>
   d4fac:	b918      	cbnz	r0, d4fb6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4fae:	4620      	mov	r0, r4
   d4fb0:	f7ff ffcd 	bl	d4f4e <_ZN6String10invalidateEv>
		return *this;
   d4fb4:	e009      	b.n	d4fca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4fb6:	462a      	mov	r2, r5
   d4fb8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4fba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fbc:	6820      	ldr	r0, [r4, #0]
   d4fbe:	f000 fa61 	bl	d5484 <memcpy>
	buffer[len] = 0;
   d4fc2:	6822      	ldr	r2, [r4, #0]
   d4fc4:	68a3      	ldr	r3, [r4, #8]
   d4fc6:	2100      	movs	r1, #0
   d4fc8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd70      	pop	{r4, r5, r6, pc}

000d4fce <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fce:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fd0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fd2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fd4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4fd6:	6043      	str	r3, [r0, #4]
	len = 0;
   d4fd8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fda:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4fdc:	460d      	mov	r5, r1
   d4fde:	b139      	cbz	r1, d4ff0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4fe0:	4608      	mov	r0, r1
   d4fe2:	f000 fa8b 	bl	d54fc <strlen>
   d4fe6:	4629      	mov	r1, r5
   d4fe8:	4602      	mov	r2, r0
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff ffd7 	bl	d4f9e <_ZN6String4copyEPKcj>
}
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	bd38      	pop	{r3, r4, r5, pc}

000d4ff4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ff4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4ff6:	b510      	push	{r4, lr}
   d4ff8:	460b      	mov	r3, r1
   d4ffa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4ffc:	d007      	beq.n	d500e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ffe:	6809      	ldr	r1, [r1, #0]
   d5000:	b119      	cbz	r1, d500a <_ZN6StringaSERKS_+0x16>
   d5002:	689a      	ldr	r2, [r3, #8]
   d5004:	f7ff ffcb 	bl	d4f9e <_ZN6String4copyEPKcj>
   d5008:	e001      	b.n	d500e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d500a:	f7ff ffa0 	bl	d4f4e <_ZN6String10invalidateEv>

	return *this;
}
   d500e:	4620      	mov	r0, r4
   d5010:	bd10      	pop	{r4, pc}

000d5012 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5012:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5014:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5016:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5018:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d501a:	6043      	str	r3, [r0, #4]
	len = 0;
   d501c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d501e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5020:	f7ff ffe8 	bl	d4ff4 <_ZN6StringaSERKS_>
}
   d5024:	4620      	mov	r0, r4
   d5026:	bd10      	pop	{r4, pc}

000d5028 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5028:	6800      	ldr	r0, [r0, #0]
   d502a:	b108      	cbz	r0, d5030 <_ZNK6String5toIntEv+0x8>
   d502c:	f000 ba18 	b.w	d5460 <atol>
	return 0;
}
   d5030:	4770      	bx	lr
	...

000d5034 <_Z17acquireWireBufferv>:
   d5034:	b570      	push	{r4, r5, r6, lr}
   d5036:	4604      	mov	r4, r0
   d5038:	2514      	movs	r5, #20
   d503a:	462a      	mov	r2, r5
   d503c:	4e09      	ldr	r6, [pc, #36]	; (d5064 <_Z17acquireWireBufferv+0x30>)
   d503e:	2100      	movs	r1, #0
   d5040:	f000 fa2b 	bl	d549a <memset>
   d5044:	8025      	strh	r5, [r4, #0]
   d5046:	2520      	movs	r5, #32
   d5048:	4631      	mov	r1, r6
   d504a:	60a5      	str	r5, [r4, #8]
   d504c:	6125      	str	r5, [r4, #16]
   d504e:	4628      	mov	r0, r5
   d5050:	f000 f8ac 	bl	d51ac <_ZnajRKSt9nothrow_t>
   d5054:	4631      	mov	r1, r6
   d5056:	6060      	str	r0, [r4, #4]
   d5058:	4628      	mov	r0, r5
   d505a:	f000 f8a7 	bl	d51ac <_ZnajRKSt9nothrow_t>
   d505e:	60e0      	str	r0, [r4, #12]
   d5060:	4620      	mov	r0, r4
   d5062:	bd70      	pop	{r4, r5, r6, pc}
   d5064:	000d58d4 	.word	0x000d58d4

000d5068 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5068:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d506a:	4d0e      	ldr	r5, [pc, #56]	; (d50a4 <_Z19__fetch_global_Wirev+0x3c>)
   d506c:	6829      	ldr	r1, [r5, #0]
   d506e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5072:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5074:	d113      	bne.n	d509e <_Z19__fetch_global_Wirev+0x36>
   d5076:	4628      	mov	r0, r5
   d5078:	f7ff f813 	bl	d40a2 <__cxa_guard_acquire>
   d507c:	b178      	cbz	r0, d509e <_Z19__fetch_global_Wirev+0x36>
   d507e:	a801      	add	r0, sp, #4
   d5080:	f7ff ffd8 	bl	d5034 <_Z17acquireWireBufferv>
   d5084:	aa01      	add	r2, sp, #4
   d5086:	4621      	mov	r1, r4
   d5088:	4807      	ldr	r0, [pc, #28]	; (d50a8 <_Z19__fetch_global_Wirev+0x40>)
   d508a:	f7ff fba5 	bl	d47d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d508e:	4628      	mov	r0, r5
   d5090:	f7ff f80c 	bl	d40ac <__cxa_guard_release>
   d5094:	4a05      	ldr	r2, [pc, #20]	; (d50ac <_Z19__fetch_global_Wirev+0x44>)
   d5096:	4906      	ldr	r1, [pc, #24]	; (d50b0 <_Z19__fetch_global_Wirev+0x48>)
   d5098:	4803      	ldr	r0, [pc, #12]	; (d50a8 <_Z19__fetch_global_Wirev+0x40>)
   d509a:	f000 f878 	bl	d518e <__aeabi_atexit>
	return wire;
}
   d509e:	4802      	ldr	r0, [pc, #8]	; (d50a8 <_Z19__fetch_global_Wirev+0x40>)
   d50a0:	b007      	add	sp, #28
   d50a2:	bd30      	pop	{r4, r5, pc}
   d50a4:	2003e724 	.word	0x2003e724
   d50a8:	2003e728 	.word	0x2003e728
   d50ac:	2003e4a4 	.word	0x2003e4a4
   d50b0:	000d4781 	.word	0x000d4781

000d50b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d50b4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d50b6:	4e18      	ldr	r6, [pc, #96]	; (d5118 <pinAvailable+0x64>)
   d50b8:	6831      	ldr	r1, [r6, #0]
   d50ba:	f011 0501 	ands.w	r5, r1, #1
   d50be:	4604      	mov	r4, r0
   d50c0:	d10a      	bne.n	d50d8 <pinAvailable+0x24>
   d50c2:	4630      	mov	r0, r6
   d50c4:	f7fe ffed 	bl	d40a2 <__cxa_guard_acquire>
   d50c8:	b130      	cbz	r0, d50d8 <pinAvailable+0x24>
   d50ca:	4629      	mov	r1, r5
   d50cc:	4813      	ldr	r0, [pc, #76]	; (d511c <pinAvailable+0x68>)
   d50ce:	f7ff feeb 	bl	d4ea8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d50d2:	4630      	mov	r0, r6
   d50d4:	f7fe ffea 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d50d8:	4810      	ldr	r0, [pc, #64]	; (d511c <pinAvailable+0x68>)
   d50da:	f7ff feef 	bl	d4ebc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d50de:	b128      	cbz	r0, d50ec <pinAvailable+0x38>
   d50e0:	f1a4 030b 	sub.w	r3, r4, #11
   d50e4:	2b02      	cmp	r3, #2
   d50e6:	d801      	bhi.n	d50ec <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d50e8:	2000      	movs	r0, #0
   d50ea:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d50ec:	f7ff ffbc 	bl	d5068 <_Z19__fetch_global_Wirev>
   d50f0:	f7ff fb84 	bl	d47fc <_ZN7TwoWire9isEnabledEv>
   d50f4:	b108      	cbz	r0, d50fa <pinAvailable+0x46>
   d50f6:	2c01      	cmp	r4, #1
   d50f8:	d9f6      	bls.n	d50e8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d50fa:	f7ff fe6b 	bl	d4dd4 <_Z22__fetch_global_Serial1v>
   d50fe:	f7ff fe65 	bl	d4dcc <_ZN11USARTSerial9isEnabledEv>
   d5102:	b118      	cbz	r0, d510c <pinAvailable+0x58>
   d5104:	f1a4 0309 	sub.w	r3, r4, #9
   d5108:	2b01      	cmp	r3, #1
   d510a:	d9ed      	bls.n	d50e8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d510c:	2c23      	cmp	r4, #35	; 0x23
   d510e:	bf8c      	ite	hi
   d5110:	2000      	movhi	r0, #0
   d5112:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5114:	bd70      	pop	{r4, r5, r6, pc}
   d5116:	bf00      	nop
   d5118:	2003e740 	.word	0x2003e740
   d511c:	2003e744 	.word	0x2003e744

000d5120 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5120:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5122:	b538      	push	{r3, r4, r5, lr}
   d5124:	4604      	mov	r4, r0
   d5126:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5128:	d80a      	bhi.n	d5140 <pinMode+0x20>
   d512a:	29ff      	cmp	r1, #255	; 0xff
   d512c:	d008      	beq.n	d5140 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d512e:	f7ff ffc1 	bl	d50b4 <pinAvailable>
   d5132:	b128      	cbz	r0, d5140 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5134:	4629      	mov	r1, r5
   d5136:	4620      	mov	r0, r4
}
   d5138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d513c:	f7ff b8fa 	b.w	d4334 <HAL_Pin_Mode>
   d5140:	bd38      	pop	{r3, r4, r5, pc}

000d5142 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5142:	b538      	push	{r3, r4, r5, lr}
   d5144:	4604      	mov	r4, r0
   d5146:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5148:	f7ff ffb4 	bl	d50b4 <pinAvailable>
   d514c:	b1f0      	cbz	r0, d518c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d514e:	2104      	movs	r1, #4
   d5150:	4620      	mov	r0, r4
   d5152:	f7ff f8e7 	bl	d4324 <HAL_Validate_Pin_Function>
   d5156:	2804      	cmp	r0, #4
   d5158:	d105      	bne.n	d5166 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d515a:	b2a9      	uxth	r1, r5
   d515c:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d515e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5162:	f7ff b8f7 	b.w	d4354 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5166:	2102      	movs	r1, #2
   d5168:	4620      	mov	r0, r4
   d516a:	f7ff f8db 	bl	d4324 <HAL_Validate_Pin_Function>
   d516e:	2802      	cmp	r0, #2
   d5170:	d10c      	bne.n	d518c <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5172:	4620      	mov	r0, r4
   d5174:	f7ff f8e6 	bl	d4344 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5178:	2801      	cmp	r0, #1
   d517a:	d001      	beq.n	d5180 <_Z11analogWritetm+0x3e>
   d517c:	2804      	cmp	r0, #4
   d517e:	d105      	bne.n	d518c <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5180:	4629      	mov	r1, r5
   d5182:	4620      	mov	r0, r4
    }
}
   d5184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5188:	f7ff b8ec 	b.w	d4364 <HAL_PWM_Write_Ext>
   d518c:	bd38      	pop	{r3, r4, r5, pc}

000d518e <__aeabi_atexit>:
   d518e:	460b      	mov	r3, r1
   d5190:	4601      	mov	r1, r0
   d5192:	4618      	mov	r0, r3
   d5194:	f000 b968 	b.w	d5468 <__cxa_atexit>

000d5198 <_ZSt15get_new_handlerv>:
   d5198:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <_ZSt15get_new_handlerv+0xc>)
   d519a:	6818      	ldr	r0, [r3, #0]
   d519c:	f3bf 8f5f 	dmb	sy
   d51a0:	4770      	bx	lr
   d51a2:	bf00      	nop
   d51a4:	2003e74c 	.word	0x2003e74c

000d51a8 <_ZdlPvj>:
   d51a8:	f7fe bf77 	b.w	d409a <_ZdlPv>

000d51ac <_ZnajRKSt9nothrow_t>:
   d51ac:	f000 b800 	b.w	d51b0 <_ZnwjRKSt9nothrow_t>

000d51b0 <_ZnwjRKSt9nothrow_t>:
   d51b0:	b510      	push	{r4, lr}
   d51b2:	2800      	cmp	r0, #0
   d51b4:	bf14      	ite	ne
   d51b6:	4604      	movne	r4, r0
   d51b8:	2401      	moveq	r4, #1
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff f966 	bl	d448c <malloc>
   d51c0:	b920      	cbnz	r0, d51cc <_ZnwjRKSt9nothrow_t+0x1c>
   d51c2:	f7ff ffe9 	bl	d5198 <_ZSt15get_new_handlerv>
   d51c6:	b108      	cbz	r0, d51cc <_ZnwjRKSt9nothrow_t+0x1c>
   d51c8:	4780      	blx	r0
   d51ca:	e7f6      	b.n	d51ba <_ZnwjRKSt9nothrow_t+0xa>
   d51cc:	bd10      	pop	{r4, pc}
	...

000d51d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51d0:	4b18      	ldr	r3, [pc, #96]	; (d5234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d1      	lsls	r1, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b16      	ldr	r3, [pc, #88]	; (d5238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d2      	lsls	r2, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b14      	ldr	r3, [pc, #80]	; (d523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d0      	lsls	r0, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b12      	ldr	r3, [pc, #72]	; (d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d1      	lsls	r1, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4b10      	ldr	r3, [pc, #64]	; (d5244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d2      	lsls	r2, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4b0e      	ldr	r3, [pc, #56]	; (d5248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d520e:	681a      	ldr	r2, [r3, #0]
   d5210:	07d0      	lsls	r0, r2, #31
   d5212:	bf5c      	itt	pl
   d5214:	2201      	movpl	r2, #1
   d5216:	601a      	strpl	r2, [r3, #0]
   d5218:	4b0c      	ldr	r3, [pc, #48]	; (d524c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d521a:	681a      	ldr	r2, [r3, #0]
   d521c:	07d1      	lsls	r1, r2, #31
   d521e:	bf5c      	itt	pl
   d5220:	2201      	movpl	r2, #1
   d5222:	601a      	strpl	r2, [r3, #0]
   d5224:	4b0a      	ldr	r3, [pc, #40]	; (d5250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5226:	681a      	ldr	r2, [r3, #0]
   d5228:	07d2      	lsls	r2, r2, #31
   d522a:	bf5c      	itt	pl
   d522c:	2201      	movpl	r2, #1
   d522e:	601a      	strpl	r2, [r3, #0]
   d5230:	4770      	bx	lr
   d5232:	bf00      	nop
   d5234:	2003e76c 	.word	0x2003e76c
   d5238:	2003e768 	.word	0x2003e768
   d523c:	2003e764 	.word	0x2003e764
   d5240:	2003e760 	.word	0x2003e760
   d5244:	2003e75c 	.word	0x2003e75c
   d5248:	2003e758 	.word	0x2003e758
   d524c:	2003e754 	.word	0x2003e754
   d5250:	2003e750 	.word	0x2003e750

000d5254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5254:	4b24      	ldr	r3, [pc, #144]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5256:	681a      	ldr	r2, [r3, #0]
   d5258:	07d0      	lsls	r0, r2, #31
   d525a:	bf5c      	itt	pl
   d525c:	2201      	movpl	r2, #1
   d525e:	601a      	strpl	r2, [r3, #0]
   d5260:	4b22      	ldr	r3, [pc, #136]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	07d1      	lsls	r1, r2, #31
   d5266:	bf5c      	itt	pl
   d5268:	2201      	movpl	r2, #1
   d526a:	601a      	strpl	r2, [r3, #0]
   d526c:	4b20      	ldr	r3, [pc, #128]	; (d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d2      	lsls	r2, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b1e      	ldr	r3, [pc, #120]	; (d52f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d0      	lsls	r0, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b1c      	ldr	r3, [pc, #112]	; (d52f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d1      	lsls	r1, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4b1a      	ldr	r3, [pc, #104]	; (d52fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5292:	681a      	ldr	r2, [r3, #0]
   d5294:	07d2      	lsls	r2, r2, #31
   d5296:	bf5c      	itt	pl
   d5298:	2201      	movpl	r2, #1
   d529a:	601a      	strpl	r2, [r3, #0]
   d529c:	4b18      	ldr	r3, [pc, #96]	; (d5300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d529e:	681a      	ldr	r2, [r3, #0]
   d52a0:	07d0      	lsls	r0, r2, #31
   d52a2:	bf5c      	itt	pl
   d52a4:	2201      	movpl	r2, #1
   d52a6:	601a      	strpl	r2, [r3, #0]
   d52a8:	4b16      	ldr	r3, [pc, #88]	; (d5304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d52aa:	681a      	ldr	r2, [r3, #0]
   d52ac:	07d1      	lsls	r1, r2, #31
   d52ae:	bf5c      	itt	pl
   d52b0:	2201      	movpl	r2, #1
   d52b2:	601a      	strpl	r2, [r3, #0]
   d52b4:	4b14      	ldr	r3, [pc, #80]	; (d5308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d52b6:	681a      	ldr	r2, [r3, #0]
   d52b8:	07d2      	lsls	r2, r2, #31
   d52ba:	bf5c      	itt	pl
   d52bc:	2201      	movpl	r2, #1
   d52be:	601a      	strpl	r2, [r3, #0]
   d52c0:	4b12      	ldr	r3, [pc, #72]	; (d530c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d52c2:	681a      	ldr	r2, [r3, #0]
   d52c4:	07d0      	lsls	r0, r2, #31
   d52c6:	bf5c      	itt	pl
   d52c8:	2201      	movpl	r2, #1
   d52ca:	601a      	strpl	r2, [r3, #0]
   d52cc:	4b10      	ldr	r3, [pc, #64]	; (d5310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d52ce:	681a      	ldr	r2, [r3, #0]
   d52d0:	07d1      	lsls	r1, r2, #31
   d52d2:	bf5c      	itt	pl
   d52d4:	2201      	movpl	r2, #1
   d52d6:	601a      	strpl	r2, [r3, #0]
   d52d8:	4b0e      	ldr	r3, [pc, #56]	; (d5314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d52da:	681a      	ldr	r2, [r3, #0]
   d52dc:	07d2      	lsls	r2, r2, #31
   d52de:	bf5c      	itt	pl
   d52e0:	2201      	movpl	r2, #1
   d52e2:	601a      	strpl	r2, [r3, #0]
   d52e4:	4770      	bx	lr
   d52e6:	bf00      	nop
   d52e8:	2003e79c 	.word	0x2003e79c
   d52ec:	2003e798 	.word	0x2003e798
   d52f0:	2003e794 	.word	0x2003e794
   d52f4:	2003e790 	.word	0x2003e790
   d52f8:	2003e78c 	.word	0x2003e78c
   d52fc:	2003e788 	.word	0x2003e788
   d5300:	2003e784 	.word	0x2003e784
   d5304:	2003e780 	.word	0x2003e780
   d5308:	2003e77c 	.word	0x2003e77c
   d530c:	2003e778 	.word	0x2003e778
   d5310:	2003e774 	.word	0x2003e774
   d5314:	2003e770 	.word	0x2003e770

000d5318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5318:	4b24      	ldr	r3, [pc, #144]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d0      	lsls	r0, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b22      	ldr	r3, [pc, #136]	; (d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d1      	lsls	r1, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b20      	ldr	r3, [pc, #128]	; (d53b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d2      	lsls	r2, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4b1e      	ldr	r3, [pc, #120]	; (d53b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d533e:	681a      	ldr	r2, [r3, #0]
   d5340:	07d0      	lsls	r0, r2, #31
   d5342:	bf5c      	itt	pl
   d5344:	2201      	movpl	r2, #1
   d5346:	601a      	strpl	r2, [r3, #0]
   d5348:	4b1c      	ldr	r3, [pc, #112]	; (d53bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d534a:	681a      	ldr	r2, [r3, #0]
   d534c:	07d1      	lsls	r1, r2, #31
   d534e:	bf5c      	itt	pl
   d5350:	2201      	movpl	r2, #1
   d5352:	601a      	strpl	r2, [r3, #0]
   d5354:	4b1a      	ldr	r3, [pc, #104]	; (d53c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5356:	681a      	ldr	r2, [r3, #0]
   d5358:	07d2      	lsls	r2, r2, #31
   d535a:	bf5c      	itt	pl
   d535c:	2201      	movpl	r2, #1
   d535e:	601a      	strpl	r2, [r3, #0]
   d5360:	4b18      	ldr	r3, [pc, #96]	; (d53c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5362:	681a      	ldr	r2, [r3, #0]
   d5364:	07d0      	lsls	r0, r2, #31
   d5366:	bf5c      	itt	pl
   d5368:	2201      	movpl	r2, #1
   d536a:	601a      	strpl	r2, [r3, #0]
   d536c:	4b16      	ldr	r3, [pc, #88]	; (d53c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d1      	lsls	r1, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b14      	ldr	r3, [pc, #80]	; (d53cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d2      	lsls	r2, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b12      	ldr	r3, [pc, #72]	; (d53d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d0      	lsls	r0, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b10      	ldr	r3, [pc, #64]	; (d53d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d1      	lsls	r1, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b0e      	ldr	r3, [pc, #56]	; (d53d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d2      	lsls	r2, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4770      	bx	lr
   d53aa:	bf00      	nop
   d53ac:	2003e7cc 	.word	0x2003e7cc
   d53b0:	2003e7c8 	.word	0x2003e7c8
   d53b4:	2003e7c4 	.word	0x2003e7c4
   d53b8:	2003e7c0 	.word	0x2003e7c0
   d53bc:	2003e7bc 	.word	0x2003e7bc
   d53c0:	2003e7b8 	.word	0x2003e7b8
   d53c4:	2003e7b4 	.word	0x2003e7b4
   d53c8:	2003e7b0 	.word	0x2003e7b0
   d53cc:	2003e7ac 	.word	0x2003e7ac
   d53d0:	2003e7a8 	.word	0x2003e7a8
   d53d4:	2003e7a4 	.word	0x2003e7a4
   d53d8:	2003e7a0 	.word	0x2003e7a0

000d53dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53dc:	4b18      	ldr	r3, [pc, #96]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53de:	681a      	ldr	r2, [r3, #0]
   d53e0:	07d1      	lsls	r1, r2, #31
   d53e2:	bf5c      	itt	pl
   d53e4:	2201      	movpl	r2, #1
   d53e6:	601a      	strpl	r2, [r3, #0]
   d53e8:	4b16      	ldr	r3, [pc, #88]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53ea:	681a      	ldr	r2, [r3, #0]
   d53ec:	07d2      	lsls	r2, r2, #31
   d53ee:	bf5c      	itt	pl
   d53f0:	2201      	movpl	r2, #1
   d53f2:	601a      	strpl	r2, [r3, #0]
   d53f4:	4b14      	ldr	r3, [pc, #80]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53f6:	681a      	ldr	r2, [r3, #0]
   d53f8:	07d0      	lsls	r0, r2, #31
   d53fa:	bf5c      	itt	pl
   d53fc:	2201      	movpl	r2, #1
   d53fe:	601a      	strpl	r2, [r3, #0]
   d5400:	4b12      	ldr	r3, [pc, #72]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5402:	681a      	ldr	r2, [r3, #0]
   d5404:	07d1      	lsls	r1, r2, #31
   d5406:	bf5c      	itt	pl
   d5408:	2201      	movpl	r2, #1
   d540a:	601a      	strpl	r2, [r3, #0]
   d540c:	4b10      	ldr	r3, [pc, #64]	; (d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d540e:	681a      	ldr	r2, [r3, #0]
   d5410:	07d2      	lsls	r2, r2, #31
   d5412:	bf5c      	itt	pl
   d5414:	2201      	movpl	r2, #1
   d5416:	601a      	strpl	r2, [r3, #0]
   d5418:	4b0e      	ldr	r3, [pc, #56]	; (d5454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d541a:	681a      	ldr	r2, [r3, #0]
   d541c:	07d0      	lsls	r0, r2, #31
   d541e:	bf5c      	itt	pl
   d5420:	2201      	movpl	r2, #1
   d5422:	601a      	strpl	r2, [r3, #0]
   d5424:	4b0c      	ldr	r3, [pc, #48]	; (d5458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5426:	681a      	ldr	r2, [r3, #0]
   d5428:	07d1      	lsls	r1, r2, #31
   d542a:	bf5c      	itt	pl
   d542c:	2201      	movpl	r2, #1
   d542e:	601a      	strpl	r2, [r3, #0]
   d5430:	4b0a      	ldr	r3, [pc, #40]	; (d545c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5432:	681a      	ldr	r2, [r3, #0]
   d5434:	07d2      	lsls	r2, r2, #31
   d5436:	bf5c      	itt	pl
   d5438:	2201      	movpl	r2, #1
   d543a:	601a      	strpl	r2, [r3, #0]
   d543c:	4770      	bx	lr
   d543e:	bf00      	nop
   d5440:	2003e7ec 	.word	0x2003e7ec
   d5444:	2003e7e8 	.word	0x2003e7e8
   d5448:	2003e7e4 	.word	0x2003e7e4
   d544c:	2003e7e0 	.word	0x2003e7e0
   d5450:	2003e7dc 	.word	0x2003e7dc
   d5454:	2003e7d8 	.word	0x2003e7d8
   d5458:	2003e7d4 	.word	0x2003e7d4
   d545c:	2003e7d0 	.word	0x2003e7d0

000d5460 <atol>:
   d5460:	220a      	movs	r2, #10
   d5462:	2100      	movs	r1, #0
   d5464:	f000 b8d8 	b.w	d5618 <strtol>

000d5468 <__cxa_atexit>:
   d5468:	b510      	push	{r4, lr}
   d546a:	4c05      	ldr	r4, [pc, #20]	; (d5480 <__cxa_atexit+0x18>)
   d546c:	4613      	mov	r3, r2
   d546e:	b12c      	cbz	r4, d547c <__cxa_atexit+0x14>
   d5470:	460a      	mov	r2, r1
   d5472:	4601      	mov	r1, r0
   d5474:	2002      	movs	r0, #2
   d5476:	f3af 8000 	nop.w
   d547a:	bd10      	pop	{r4, pc}
   d547c:	4620      	mov	r0, r4
   d547e:	bd10      	pop	{r4, pc}
   d5480:	00000000 	.word	0x00000000

000d5484 <memcpy>:
   d5484:	b510      	push	{r4, lr}
   d5486:	1e43      	subs	r3, r0, #1
   d5488:	440a      	add	r2, r1
   d548a:	4291      	cmp	r1, r2
   d548c:	d004      	beq.n	d5498 <memcpy+0x14>
   d548e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5492:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5496:	e7f8      	b.n	d548a <memcpy+0x6>
   d5498:	bd10      	pop	{r4, pc}

000d549a <memset>:
   d549a:	4402      	add	r2, r0
   d549c:	4603      	mov	r3, r0
   d549e:	4293      	cmp	r3, r2
   d54a0:	d002      	beq.n	d54a8 <memset+0xe>
   d54a2:	f803 1b01 	strb.w	r1, [r3], #1
   d54a6:	e7fa      	b.n	d549e <memset+0x4>
   d54a8:	4770      	bx	lr
	...

000d54ac <srand>:
   d54ac:	b538      	push	{r3, r4, r5, lr}
   d54ae:	4b12      	ldr	r3, [pc, #72]	; (d54f8 <srand+0x4c>)
   d54b0:	681c      	ldr	r4, [r3, #0]
   d54b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54b4:	4605      	mov	r5, r0
   d54b6:	b9d3      	cbnz	r3, d54ee <srand+0x42>
   d54b8:	2018      	movs	r0, #24
   d54ba:	f7fe ffe7 	bl	d448c <malloc>
   d54be:	f243 330e 	movw	r3, #13070	; 0x330e
   d54c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d54c4:	8003      	strh	r3, [r0, #0]
   d54c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54ca:	8043      	strh	r3, [r0, #2]
   d54cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d54d0:	8083      	strh	r3, [r0, #4]
   d54d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d54d6:	80c3      	strh	r3, [r0, #6]
   d54d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d54dc:	8103      	strh	r3, [r0, #8]
   d54de:	2305      	movs	r3, #5
   d54e0:	8143      	strh	r3, [r0, #10]
   d54e2:	230b      	movs	r3, #11
   d54e4:	8183      	strh	r3, [r0, #12]
   d54e6:	2201      	movs	r2, #1
   d54e8:	2300      	movs	r3, #0
   d54ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d54ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54f0:	2200      	movs	r2, #0
   d54f2:	611d      	str	r5, [r3, #16]
   d54f4:	615a      	str	r2, [r3, #20]
   d54f6:	bd38      	pop	{r3, r4, r5, pc}
   d54f8:	2003e4a0 	.word	0x2003e4a0

000d54fc <strlen>:
   d54fc:	4603      	mov	r3, r0
   d54fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5502:	2a00      	cmp	r2, #0
   d5504:	d1fb      	bne.n	d54fe <strlen+0x2>
   d5506:	1a18      	subs	r0, r3, r0
   d5508:	3801      	subs	r0, #1
   d550a:	4770      	bx	lr

000d550c <_strtol_r>:
   d550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5510:	4680      	mov	r8, r0
   d5512:	4840      	ldr	r0, [pc, #256]	; (d5614 <_strtol_r+0x108>)
   d5514:	f8d0 9000 	ldr.w	r9, [r0]
   d5518:	460f      	mov	r7, r1
   d551a:	463d      	mov	r5, r7
   d551c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5520:	eb09 0004 	add.w	r0, r9, r4
   d5524:	7840      	ldrb	r0, [r0, #1]
   d5526:	f000 0008 	and.w	r0, r0, #8
   d552a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d552e:	b108      	cbz	r0, d5534 <_strtol_r+0x28>
   d5530:	462f      	mov	r7, r5
   d5532:	e7f2      	b.n	d551a <_strtol_r+0xe>
   d5534:	2c2d      	cmp	r4, #45	; 0x2d
   d5536:	d103      	bne.n	d5540 <_strtol_r+0x34>
   d5538:	1cbd      	adds	r5, r7, #2
   d553a:	787c      	ldrb	r4, [r7, #1]
   d553c:	2601      	movs	r6, #1
   d553e:	e003      	b.n	d5548 <_strtol_r+0x3c>
   d5540:	2c2b      	cmp	r4, #43	; 0x2b
   d5542:	bf04      	itt	eq
   d5544:	787c      	ldrbeq	r4, [r7, #1]
   d5546:	1cbd      	addeq	r5, r7, #2
   d5548:	b113      	cbz	r3, d5550 <_strtol_r+0x44>
   d554a:	2b10      	cmp	r3, #16
   d554c:	d10a      	bne.n	d5564 <_strtol_r+0x58>
   d554e:	e05b      	b.n	d5608 <_strtol_r+0xfc>
   d5550:	2c30      	cmp	r4, #48	; 0x30
   d5552:	d157      	bne.n	d5604 <_strtol_r+0xf8>
   d5554:	7828      	ldrb	r0, [r5, #0]
   d5556:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d555a:	2858      	cmp	r0, #88	; 0x58
   d555c:	d14d      	bne.n	d55fa <_strtol_r+0xee>
   d555e:	786c      	ldrb	r4, [r5, #1]
   d5560:	2310      	movs	r3, #16
   d5562:	3502      	adds	r5, #2
   d5564:	2e00      	cmp	r6, #0
   d5566:	bf14      	ite	ne
   d5568:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d556c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d5570:	2700      	movs	r7, #0
   d5572:	fbbc faf3 	udiv	sl, ip, r3
   d5576:	4638      	mov	r0, r7
   d5578:	fb03 cc1a 	mls	ip, r3, sl, ip
   d557c:	eb09 0e04 	add.w	lr, r9, r4
   d5580:	f89e e001 	ldrb.w	lr, [lr, #1]
   d5584:	f01e 0f04 	tst.w	lr, #4
   d5588:	d001      	beq.n	d558e <_strtol_r+0x82>
   d558a:	3c30      	subs	r4, #48	; 0x30
   d558c:	e00b      	b.n	d55a6 <_strtol_r+0x9a>
   d558e:	f01e 0e03 	ands.w	lr, lr, #3
   d5592:	d01b      	beq.n	d55cc <_strtol_r+0xc0>
   d5594:	f1be 0f01 	cmp.w	lr, #1
   d5598:	bf0c      	ite	eq
   d559a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d559e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d55a2:	ebce 0404 	rsb	r4, lr, r4
   d55a6:	42a3      	cmp	r3, r4
   d55a8:	dd10      	ble.n	d55cc <_strtol_r+0xc0>
   d55aa:	f1b7 3fff 	cmp.w	r7, #4294967295
   d55ae:	d00a      	beq.n	d55c6 <_strtol_r+0xba>
   d55b0:	4550      	cmp	r0, sl
   d55b2:	d806      	bhi.n	d55c2 <_strtol_r+0xb6>
   d55b4:	d101      	bne.n	d55ba <_strtol_r+0xae>
   d55b6:	4564      	cmp	r4, ip
   d55b8:	dc03      	bgt.n	d55c2 <_strtol_r+0xb6>
   d55ba:	fb03 4000 	mla	r0, r3, r0, r4
   d55be:	2701      	movs	r7, #1
   d55c0:	e001      	b.n	d55c6 <_strtol_r+0xba>
   d55c2:	f04f 37ff 	mov.w	r7, #4294967295
   d55c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d55ca:	e7d7      	b.n	d557c <_strtol_r+0x70>
   d55cc:	1c7b      	adds	r3, r7, #1
   d55ce:	d10c      	bne.n	d55ea <_strtol_r+0xde>
   d55d0:	2e00      	cmp	r6, #0
   d55d2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d55d6:	bf14      	ite	ne
   d55d8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d55dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d55e0:	f8c8 3000 	str.w	r3, [r8]
   d55e4:	b92a      	cbnz	r2, d55f2 <_strtol_r+0xe6>
   d55e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d55ea:	b106      	cbz	r6, d55ee <_strtol_r+0xe2>
   d55ec:	4240      	negs	r0, r0
   d55ee:	b172      	cbz	r2, d560e <_strtol_r+0x102>
   d55f0:	b107      	cbz	r7, d55f4 <_strtol_r+0xe8>
   d55f2:	1e69      	subs	r1, r5, #1
   d55f4:	6011      	str	r1, [r2, #0]
   d55f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d55fa:	2430      	movs	r4, #48	; 0x30
   d55fc:	2b00      	cmp	r3, #0
   d55fe:	d1b1      	bne.n	d5564 <_strtol_r+0x58>
   d5600:	2308      	movs	r3, #8
   d5602:	e7af      	b.n	d5564 <_strtol_r+0x58>
   d5604:	230a      	movs	r3, #10
   d5606:	e7ad      	b.n	d5564 <_strtol_r+0x58>
   d5608:	2c30      	cmp	r4, #48	; 0x30
   d560a:	d0a3      	beq.n	d5554 <_strtol_r+0x48>
   d560c:	e7aa      	b.n	d5564 <_strtol_r+0x58>
   d560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5612:	bf00      	nop
   d5614:	2003e43c 	.word	0x2003e43c

000d5618 <strtol>:
   d5618:	4613      	mov	r3, r2
   d561a:	460a      	mov	r2, r1
   d561c:	4601      	mov	r1, r0
   d561e:	4802      	ldr	r0, [pc, #8]	; (d5628 <strtol+0x10>)
   d5620:	6800      	ldr	r0, [r0, #0]
   d5622:	f7ff bf73 	b.w	d550c <_strtol_r>
   d5626:	bf00      	nop
   d5628:	2003e4a0 	.word	0x2003e4a0

000d562c <dynalib_user>:
   d562c:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d563c:	00000000 68630030 65676e61 65657053     ....0.changeSpee
   d564c:	696b0064 77536c6c 68637469 00000000     d.killSwitch....

000d565c <_ZTVN5spark12NetworkClassE>:
	...
   d5664:	000d44bd 000d44c7 000d44d1 000d44db     .D...D...D...D..
   d5674:	000d44e5 000d44f1 000d44fd 000d4509     .D...D...D...E..
   d5684:	000d4511 000d451b 000d4525              .E...E..%E..

000d5690 <_ZTVN5spark9MeshClassE>:
	...
   d5698:	000d4663 000d4659 000d464f 000d4645     cF..YF..OF..EF..
   d56a8:	000d4639 000d462d 000d4621 000d4619     9F..-F..!F...F..
   d56b8:	000d460f 000d4605 000d4525              .F...F..%E..

000d56c4 <_ZTV7TwoWire>:
	...
   d56cc:	000d4781 000d47cb 000d47a3 000d4783     .G...G...G...G..
   d56dc:	000d47ab 000d47b3 000d47bb 000d47c3     .G...G...G...G..

000d56ec <_ZTV9USBSerial>:
	...
   d56f4:	000d4809 000d4859 000d4867 000d4c51     .H..YH..gH..QL..
   d5704:	000d4845 000d480b 000d4821 000d4853     EH...H..!H..SH..
   d5714:	000d4837 000d4805                       7H...H..

000d571c <_ZTV9IPAddress>:
	...
   d5724:	000d491d 000d490d 000d490f              .I...I...I..

000d5730 <_ZTVN5spark13CellularClassE>:
	...
   d5738:	000d4bcb 000d4bc1 000d4bb7 000d4b6d     .K...K...K..mK..
   d5748:	000d4bab 000d4b9f 000d4b93 000d4b8b     .K...K...K...K..
   d5758:	000d4b81 000d4b77 000d4525 2b25005a     .K..wK..%E..Z.%+
   d5768:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d5778:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d5788:	656d6974 75616200 65530064 6c616972     time.baud.Serial
   d5798:	72655300 316c6169 70797400 61700065     .Serial1.type.pa
   d57a8:	006d6172 00646d63 68006469 7300646e     ram.cmd.id.hnd.s
   d57b8:	006d7274 746c6966 6c766c00 64646100     trm.filt.lvl.add
   d57c8:	646e6148 0072656c 6f6d6572 61486576     Handler.removeHa
   d57d8:	656c646e 6e650072 61486d75 656c646e     ndler.enumHandle
   d57e8:	4a007372 534e4f53 61657274 676f4c6d     rs.JSONStreamLog
   d57f8:	646e6148 0072656c 00707061 30313025     Handler.app.%010
   d5808:	5d002075 64250020 00202c00 203a2928     u .] .%d., .(): 
   d5818:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d5828:	69617465 3d20736c 0a0d0020 6c006600     etails = ....f.l
   d5838:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   d5848:	6e6f6e00 72740065 00656361 6f666e69     .none.trace.info
   d5858:	72617700 7265006e 00726f72 696e6170     .warn.error.pani
   d5868:	6c610063 0000006c                       c.all...

000d5870 <_ZTV11USARTSerial>:
	...
   d5878:	000d4d1d 000d4d6d 000d4d7b 000d4c51     .M..mM..{M..QL..
   d5888:	000d4d31 000d4d53 000d4d3f 000d4d67     1M..SM..?M..gM..
   d5898:	000d4d1f 000d4d23                       .M..#M..

000d58a0 <_ZTVN5spark13EthernetClassE>:
	...
   d58a8:	000d4f21 000d4f17 000d4f0d 000d4f03     !O...O...O...O..
   d58b8:	000d4ef7 000d4eeb 000d4edf 000d4ed7     .N...N...N...N..
   d58c8:	000d4ecd 000d4ec3 000d4525              .N...N..%E..

000d58d4 <_ZSt7nothrow>:
	...

000d58d5 <_ctype_>:
   d58d5:	20202000 20202020 28282020 20282828     .         ((((( 
   d58e5:	20202020 20202020 20202020 20202020                     
   d58f5:	10108820 10101010 10101010 10101010      ...............
   d5905:	04040410 04040404 10040404 10101010     ................
   d5915:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d5925:	01010101 01010101 01010101 10101010     ................
   d5935:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d5945:	02020202 02020202 02020202 10101010     ................
   d5955:	00000020 00000000 00000000 00000000      ...............
	...

000d59d8 <__sf_fake_stdin>:
	...

000d59f8 <__sf_fake_stdout>:
	...

000d5a18 <__sf_fake_stderr>:
	...
   d5a38:	00000043                                         C.

000d5a3a <link_const_variable_data_end>:
	...

000d5a3c <link_constructors_location>:
   d5a3c:	000d411f 	.word	0x000d411f
   d5a40:	000d45f1 	.word	0x000d45f1
   d5a44:	000d4731 	.word	0x000d4731
   d5a48:	000d4bd5 	.word	0x000d4bd5
   d5a4c:	000d4c11 	.word	0x000d4c11
   d5a50:	000d4c2d 	.word	0x000d4c2d
   d5a54:	000d4c41 	.word	0x000d4c41
   d5a58:	000d4cf5 	.word	0x000d4cf5
   d5a5c:	000d4e75 	.word	0x000d4e75
   d5a60:	000d4f2d 	.word	0x000d4f2d
   d5a64:	000d51d1 	.word	0x000d51d1
   d5a68:	000d5255 	.word	0x000d5255
   d5a6c:	000d5319 	.word	0x000d5319
   d5a70:	000d53dd 	.word	0x000d53dd

000d5a74 <link_constructors_end>:
	...
